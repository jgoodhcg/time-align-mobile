;; Connected to nREPL server - nrepl://localhost:8202
;; CIDER 0.24.0snapshot (package: 20191129.901), nREPL 0.6.0
;; Clojure 1.10.1, Java 11.0.5-ea
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
;; ======================================================================
;; If you’re new to CIDER it is highly recommended to go through its
;; manual first. Type <M-x cider-view-manual> to view it.
;; In case you’re seeing any warnings you should consult the manual’s
;; "Troubleshooting" section.
;;
;; Here are few tips to get you started:
;;
;; * Press <C-h m> to see a list of the keybindings available (this
;;   will work in every Emacs buffer)
;; * Press <, ,> to quickly invoke some REPL command
;; * Press <, s s> to switch between the REPL and a Clojure file
;; * Press <M-x cider-find-var> to jump to the source of something (e.g. a var, a
;;   Java method)
;; * Press <, h h> to view the documentation for something (e.g.
;;   a var, a Java method)
;; * Enable ‘eldoc-mode’ to display function & method signatures in the minibuffer.
;; * Print CIDER’s refcard and keep it close to your keyboard.
;;
;; CIDER is super customizable - try <M-x customize-group cider> to
;; get a feel for this. If you’re thirsty for knowledge you should try
;; <M-x cider-drink-a-sip>.
;;
;; If you think you’ve encountered a bug (or have some suggestions for
;; improvements) use <M-x cider-report-bug> to report it.
;;
;; Above all else - don’t panic! In case of an emergency - procure
;; some (hard) cider and enjoy it responsibly!
;;
;; You can remove this message with the <M-x cider-repl-clear-help-banner> command.
;; You can disable it from appearing on start by setting
;; ‘cider-repl-display-help-banner’ to nil.
;; ======================================================================
;; Please, consider taking part in the State of CIDER survey
;; https://forms.gle/Cp6DW2zGUQkh42u38
;; Your feedback means a lot to us!
;; ======================================================================
;;  Startup: /usr/bin/npx shadow-cljs -d nrepl:0.6.0 -d cider/piggieback:0.4.2 -d cider/cider-nrepl:0.23.0-SNAPSHOT server
;;
;; ClojureScript REPL type: shadow
;; ClojureScript REPL init form: (do (require '[shadow.cljs.devtools.api :as shadow]) (shadow/watch :app) (shadow/nrepl-select :app))
;;
[:app] Configuring build.
[:app] Compiling ...
[:app] Build completed. (216 files, 5 compiled, 0 warnings, 4.61s)
To quit, type: :cljs/quit
[:selected :app]shadow.user> 
cljs.user> (+ 1 1)
2
cljs.user> (ns time-align-mobile.subs)
niltime-align-mobile.substime-align-mobile.subs
time-align-mobile.subs> (def db @re-frame.db/app-db)
#'time-align-mobile.subs/db
time-align-mobile.subs> (def periods (get-periods db :no-op))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :1:15
 Use of undeclared Var time-align-mobile.subs/get-periods
--------------------------------------------------------------------------------
#'time-align-mobile.subs/periods
time-align-mobile.subs> (def get-time-on-day-for-track (fn [date planned]
                                    (->> periods
                                         (filter #(= (:planned %) planned))
                                         (map #(helpers/ms->h-float
                                                (helpers/period-time-on-day % date)))
                                         (reduce +))))
#'time-align-mobile.subs/get-time-on-day-for-track
time-align-mobile.subs> (def data (->> 7
                  range
                  (take 7)
                  (map #(helpers/back-n-days (js/Date.) %))
                  (map (fn [date]
                         {date {:actual  (get-time-on-day-for-track date false)
                                :planned (get-time-on-day-for-track date true)}}))))
#'time-align-mobile.subs/data
time-align-mobile.subs> data
({#inst "2019-12-14T05:00:00.000-00:00" {:actual 0, :planned 0}} {#inst "2019-12-13T05:00:00.000-00:00" {:actual 0, :planned 0}} {#inst "2019-12-12T05:00:00.000-00:00" {:actual 0, :planned 0}} {#inst "2019-12-11T05:00:00.000-00:00" {:actual 0, :planned 0}} {#inst "2019-12-10T05:00:00.000-00:00" {:actual 8.58, :planned 0}} {#inst "2019-12-09T05:00:00.000-00:00" {:actual 29.24, :planned 0}} {#inst "2019-12-08T05:00:00.000-00:00" {:actual 8.58, :planned 0}})
time-align-mobile.subs> (keys data)
time-align-mobile.subs> (def data (->> 7
                  range
                  (take 7)
                  (map #(helpers/back-n-days (js/Date.) %))
                  (map (fn [date]
                         {date {:actual  (get-time-on-day-for-track date false)
                                :planned (get-time-on-day-for-track date true)}}))))
#'time-align-mobile.subs/data
time-align-mobile.subs> (def data (->> 7
                  range
                  (take 7)
                  (map #(helpers/back-n-days (js/Date.) %))
                  (map (fn [date]
                         {date {:actual  (get-time-on-day-for-track date false)
                                :planned (get-time-on-day-for-track date true)}}))
                  (apply merge)))
#'time-align-mobile.subs/data
time-align-mobile.subs> data
{#inst "2019-12-14T05:00:00.000-00:00" {:actual 0, :planned 0}, #inst "2019-12-13T05:00:00.000-00:00" {:actual 0, :planned 0}, #inst "2019-12-12T05:00:00.000-00:00" {:actual 0, :planned 0}, #inst "2019-12-11T05:00:00.000-00:00" {:actual 0, :planned 0}, #inst "2019-12-10T05:00:00.000-00:00" {:actual 8.58, :planned 0}, #inst "2019-12-09T05:00:00.000-00:00" {:actual 29.24, :planned 0}, #inst "2019-12-08T05:00:00.000-00:00" {:actual 8.58, :planned 0}}
time-align-mobile.subs> (keys data)
(#inst "2019-12-14T05:00:00.000-00:00" #inst "2019-12-13T05:00:00.000-00:00" #inst "2019-12-12T05:00:00.000-00:00" #inst "2019-12-11T05:00:00.000-00:00" #inst "2019-12-10T05:00:00.000-00:00" #inst "2019-12-09T05:00:00.000-00:00" #inst "2019-12-08T05:00:00.000-00:00")
time-align-mobile.subs> (->> data keys (.getDay))
;; output cleared

time-align-mobile.subs> (->> data keys (map #(.getDay %)))
(6 5 4 3 2 1 0)
time-align-mobile.subs> (helpers/day-of-week 1)
nil[:app] Compiling ...
[:app] Build completed. (216 files, 11 compiled, 0 warnings, 2.01s)

time-align-mobile.subs> (helpers/day-of-week 1)
"Mon"
time-align-mobile.subs> (->> data keys (map #(helpers/day-of-week (.getDay %))))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :1:6
 Use of undeclared Var time-align-mobile.subs/data
--------------------------------------------------------------------------------
("Sat" "Fri" "Thu" "Wed" "Tue" "Mon" "Sun")
time-align-mobile.subs> (select [sp/MAP-VALS] data)
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :1:23
 Use of undeclared Var time-align-mobile.subs/data
--------------------------------------------------------------------------------
[{:actual 0, :planned 0} {:actual 0, :planned 0} {:actual 0, :planned 0} {:actual 0, :planned 0} {:actual 8.58, :planned 0} {:actual 29.24, :planned 0} {:actual 8.58, :planned 0}]
time-align-mobile.subs> (select [sp/MAP-VALS :actual] data)
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :1:31
 Use of undeclared Var time-align-mobile.subs/data
--------------------------------------------------------------------------------
[0 0 0 0 8.58 29.24 8.58]
time-align-mobile.subs> (clj->js {:afunction (fn [a] a)})
#js {:afunction #object[Function]}
time-align-mobile.subs> (clj->js {:a {:b {:c "whatever"}}})
#js {:a #js {:b #js {:c "whatever"}}}[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.69s)
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.66s)
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.40s)
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.43s)
Oops, Unexpected object value (nil) {:path , :flavor nil, :obj nil}
Oops, Unexpected object value (nil) {:path , :flavor nil, :obj nil}
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.43s)
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.42s)
{:labels (Sat Fri Thu Wed Tue Mon Sun), :datasets [{:data [0 0 0 0 8.58 29.24 8.58]}]}
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.65s)
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.45s)
{:labels (Sat Fri Thu Wed Tue Mon Sun), :datasets #js [#js {:data #js [0 0 0 0 8.58 29.24 8.58]}]}
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.63s)
{:labels #js [Sat Fri Thu Wed Tue Mon Sun], :datasets #js [#js {:data #js [0 0 0 0 8.58 29.24 8.58]}]}
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.75s)
#js {:labels #js [Sat Fri Thu Wed Tue Mon Sun], :datasets #js [#js {:data #js [0 0 0 0 8.58 29.24 8.58]}]}

time-align-mobile.subs> 