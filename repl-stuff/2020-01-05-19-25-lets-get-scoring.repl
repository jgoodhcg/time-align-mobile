;; Connected to nREPL server - nrepl://localhost:8202
;; CIDER 0.24.0snapshot (package: 20191129.901), nREPL 0.6.0
;; Clojure 1.10.1, Java 11.0.5-ea
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
;; ======================================================================
;; If you’re new to CIDER it is highly recommended to go through its
;; manual first. Type <M-x cider-view-manual> to view it.
;; In case you’re seeing any warnings you should consult the manual’s
;; "Troubleshooting" section.
;;
;; Here are few tips to get you started:
;;
;; * Press <C-h m> to see a list of the keybindings available (this
;;   will work in every Emacs buffer)
;; * Press <, ,> to quickly invoke some REPL command
;; * Press <, s s> to switch between the REPL and a Clojure file
;; * Press <M-x cider-find-var> to jump to the source of something (e.g. a var, a
;;   Java method)
;; * Press <, h h> to view the documentation for something (e.g.
;;   a var, a Java method)
;; * Enable ‘eldoc-mode’ to display function & method signatures in the minibuffer.
;; * Print CIDER’s refcard and keep it close to your keyboard.
;;
;; CIDER is super customizable - try <M-x customize-group cider> to
;; get a feel for this. If you’re thirsty for knowledge you should try
;; <M-x cider-drink-a-sip>.
;;
;; If you think you’ve encountered a bug (or have some suggestions for
;; improvements) use <M-x cider-report-bug> to report it.
;;
;; Above all else - don’t panic! In case of an emergency - procure
;; some (hard) cider and enjoy it responsibly!
;;
;; You can remove this message with the <M-x cider-repl-clear-help-banner> command.
;; You can disable it from appearing on start by setting
;; ‘cider-repl-display-help-banner’ to nil.
;; ======================================================================
;; Please, consider taking part in the State of CIDER survey
;; https://forms.gle/Cp6DW2zGUQkh42u38
;; Your feedback means a lot to us!
;; ======================================================================
;;  Startup: /usr/bin/npx shadow-cljs -d nrepl:0.6.0 -d cider/piggieback:0.4.2 -d cider/cider-nrepl:0.23.0-SNAPSHOT server
;;
;; ClojureScript REPL type: shadow
;; ClojureScript REPL init form: (do (require '[shadow.cljs.devtools.api :as shadow]) (shadow/watch :app) (shadow/nrepl-select :app))
;;
[:app] Configuring build.
[:app] Compiling ...
[:app] Build completed. (216 files, 5 compiled, 0 warnings, 5.28s)
To quit, type: :cljs/quit
[:selected :app]shadow.user> 
cljs.user> (+ 11)
11
cljs.user> (->> range
                (take 7))
cljs.user> (do (->> range
                (take 7)))
cljs.user> (identity 2)
2
cljs.user> (doall (->> range
                (take 7)))
cljs$core$seq

sval
cljs$core$ISeqable$_seq$arity$1
cljs$core$seq
cljs$core$IFn$_invoke$arity$1
cljs$core$IFn$_invoke$arity$1
cljs$core$doall
eval code
eval@[native code]

shadow$cljs$devtools$client$env$repl_call
shadow$cljs$devtools$client$react_native$repl_invoke
shadow$cljs$devtools$client$react_native$handle_message

shadow$cljs$devtools$client$env$process_next_BANG_
shadow$cljs$devtools$client$env$process_ws_msg
onmessage
dispatchEvent@http://192.168.1.129:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:30978:31
http://192.168.1.129:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:32146:31
emit@http://192.168.1.129:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:5585:42
__callFunction@http://192.168.1.129:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4880:49
http://192.168.1.129:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4637:31
__guard@http://192.168.1.129:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4834:15
callFunctionReturnFlushedQueue@http://192.168.1.129:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4636:21
callFunctionReturnFlushedQueue@[native code]
cljs.user> (->> (range)
                (take 7))
(0 1 2 3 4 5 6)
cljs.user> (def app-db @re-frame.db/app-db)
#'cljs.user/app-db
cljs.user> (ns time-align-mobile.subs) 
niltime-align-mobile.substime-align-mobile.subs
time-align-mobile.subs> (def app-db @re-frame.db/app-db)
#'time-align-mobile.subs/app-db
time-align-mobile.subs> (->> (range)
                             (take 7)
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      day))))
                             
(#inst "2020-01-05T05:00:00.000-00:00" #inst "2020-01-04T05:00:00.000-00:00" #inst "2020-01-03T05:00:00.000-00:00" #inst "2020-01-02T05:00:00.000-00:00" #inst "2020-01-01T05:00:00.000-00:00" #inst "2019-12-31T05:00:00.000-00:00" #inst "2019-12-30T05:00:00.000-00:00")
time-align-mobile.subs> (->> (range)
                             (take 7)
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      (->> (range)
                                           (take helpers/day-min)
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)]
                                                    exact-date))))))))
                             
;; output cleared

time-align-mobile.subs> (def periods (get-periods app-db :no-op))    
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :1:15
 Use of undeclared Var time-align-mobile.subs/get-periods
--------------------------------------------------------------------------------
#'time-align-mobile.subs/periods
time-align-mobile.subs> (count periods)
664
time-align-mobile.subs> (->> (range)
                             (take 7)
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      (->> (range)
                                           (take helpers/day-min)
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)
                                                        ed-ms (.valueOf exact-date)
                                                        overlapping-periods (->> periods
                                                                                 (filter (fn [period]
                                                                                           (if (and 
                                                                                                (-> (.valueOf
                                                                                                     (:stop period))
                                                                                                    (>= ed-ms))
                                                                                                (-> (.valueOf
                                                                                                     (:start period))
                                                                                                    (<= ed-ms))))))
                                                        planned (->> overlapping-periods
                                                                     (filter :planned))
                                                        actual (->> overlapping-periods
                                                                    (remove :planned))]
                                                        [(count planned) (count actual)])))))))))
                             
Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 24, col 88] Unmatched delimiter ]. {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 24, :col 88}------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :2:65
 Use of undeclared Var time-align-mobile.subs/planned
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :2:81
 Use of undeclared Var time-align-mobile.subs/actual
--------------------------------------------------------------------------------
[0 0]Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}
time-align-mobile.subs> (->> (range)
                             (take 7)
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      (->> (range)
                                           (take helpers/day-min)
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)
                                                        ed-ms (.valueOf exact-date)
                                                        overlapping-periods (->> periods
                                                                                 (filter (fn [period]
                                                                                           (if (and 
                                                                                                (-> (.valueOf
                                                                                                     (:stop period))
                                                                                                    (>= ed-ms))
                                                                                                (-> (.valueOf
                                                                                                     (:start period))
                                                                                                    (<= ed-ms)))))))
                                                        planned (->> overlapping-periods
                                                                     (filter :planned))
                                                        actual (->> overlapping-periods
                                                                    (remove :planned))]
                                                        [(count planned) (count actual)]))))))))
                             
;; output cleared
time-align-mobile.subs> (->> (range)
                             (take 7)
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      (->> (range)
                                           (take helpers/day-min)
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)
                                                        ed-ms (.valueOf exact-date)
                                                        overlapping-periods (->> periods
                                                                                 (filter (fn [period]
                                                                                           (and 
                                                                                            (-> (.valueOf
                                                                                                 (:stop period))
                                                                                                (>= ed-ms))
                                                                                            (-> (.valueOf
                                                                                                 (:start period))
                                                                                                (<= ed-ms))))))
                                                        planned (->> overlapping-periods
                                                                     (filter :planned))
                                                        actual (->> overlapping-periods
                                                                    (remove :planned))]
                                                        [(count planned) (count actual)]))))))))
                             
REPL command timed out.
time-align-mobile.subs> (def periods (filter 
                                      (fn [p] (-> (:stop p)
                                                  (.valueOf)
                                                  (> (.valueOf
                                                      (helpers/back-n-days 
                                                       (helpers/reset-relative-ms 0 (js/Date.)) 7))))) 
                                      (get-periods app-db :no-op)))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :7:40
 Use of undeclared Var time-align-mobile.subs/get-periods
--------------------------------------------------------------------------------
#'time-align-mobile.subs/periods
time-align-mobile.subs> (count periods)
76
time-align-mobile.subs> (->> (range)
                             (take 7)
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      (->> (range)
                                           (take helpers/day-min)
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)
                                                        ed-ms (.valueOf exact-date)
                                                        overlapping-periods (->> periods
                                                                                 (filter (fn [period]
                                                                                           (and 
                                                                                            (-> (.valueOf
                                                                                                 (:stop period))
                                                                                                (>= ed-ms))
                                                                                            (-> (.valueOf
                                                                                                 (:start period))
                                                                                                (<= ed-ms))))))
                                                        planned (->> overlapping-periods
                                                                     (filter :planned))
                                                        actual (->> overlapping-periods
                                                                    (remove :planned))]
                                                        [(count planned) (count actual)]))))))))
                             
;; output cleared

time-align-mobile.subs> (def periods-last-7-day7 (filter 
                                      (fn [p] (-> (:stop p)
                                                  (.valueOf)
                                                  (> (.valueOf
                                                      (helpers/back-n-days 
                                                       (helpers/reset-relative-ms 0 (js/Date.)) 7))))) 
                                      (get-periods app-db :no-op)))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :7:40
 Use of undeclared Var time-align-mobile.subs/get-periods
--------------------------------------------------------------------------------
#'time-align-mobile.subs/periods-last-7-day7
time-align-mobile.subs> (->> (range)
                             (take 7)
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      (->> (range)
                                           (take helpers/day-min)
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)
                                                        ed-ms (.valueOf exact-date)
                                                        overlapping-periods (->> periods-last-7-days
                                                                                 (filter (fn [period]
                                                                                           (and 
                                                                                            (-> (.valueOf
                                                                                                 (:stop period))
                                                                                                (>= ed-ms))
                                                                                            (-> (.valueOf
                                                                                                 (:start period))
                                                                                                (<= ed-ms))))))
                                                        planned (->> overlapping-periods
                                                                     (filter :planned))
                                                        actual (->> overlapping-periods
                                                                    (remove :planned))]
                                                        [(count planned) (count actual)]))))))))

;; output cleared

time-align-mobile.subs> (def periods-last-7-days (filter 
                                      (fn [p] (-> (:stop p)
                                                  (.valueOf)
                                                  (> (.valueOf
                                                      (helpers/back-n-days 
                                                       (helpers/reset-relative-ms 0 (js/Date.)) 7))))) 
                                      (get-periods app-db :no-op)))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :7:40
 Use of undeclared Var time-align-mobile.subs/get-periods
--------------------------------------------------------------------------------
#'time-align-mobile.subs/periods-last-7-days
time-align-mobile.subs> (->> (range)
                             (take 7)
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      (->> (range)
                                           (take helpers/day-min)
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)
                                                        ed-ms (.valueOf exact-date)
                                                        overlapping-periods (->> periods-last-7-days
                                                                                 (filter (fn [period]
                                                                                           (and 
                                                                                            (-> (.valueOf
                                                                                                 (:stop period))
                                                                                                (>= ed-ms))
                                                                                            (-> (.valueOf
                                                                                                 (:start period))
                                                                                                (<= ed-ms))))))
                                                        planned (->> overlapping-periods
                                                                     (filter :planned))
                                                        p-count (count planned)
                                                        p-ids (->> planned
                                                                   (map :id)
                                                                   set)
                                                        actual (->> overlapping-periods
                                                                    (remove :planned))
                                                        a-count (count actual)
                                                        a-ids (->> actual
                                                                   (map :id)
                                                                   set)
                                                        intersection (clojure.set/intersection 
                                                             p-ids a-ids)]

                                                    (cond 
                                                      ;; didn't plan didn't do
                                                      (and
                                                       (= 0 p-count)
                                                       (= 0 a-count)) 0
                                                      ;; planned xor did
                                                      (or
                                                       (= 0 p-count)
                                                       (= 0 a-count)) 1
                                                      ;; planned and did but do not match at all
                                                      (= 0 (count intersection)) 2
                                                      ;; planned and did and match perfectly
                                                      (= p-ids a-ids) 4
                                                      ;; planned and did but only kinda match
                                                      (> 0 (count intersection)) 3)))))))))

;; output cleared

time-align-mobile.subs> (+ 1 1)
2
time-align-mobile.subs> (+ 1 1)
2
time-align-mobile.subs> (->> (range)
                             (take 7)
                             ;; map over the days
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      (->> (range)
                                           (take helpers/day-min)
                                           ;; map over every minute in the day
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)
                                                        ed-ms (.valueOf exact-date)
                                                        overlapping-periods (->> periods-last-7-days
                                                                                 (filter (fn [period]
                                                                                           (and 
                                                                                            (-> (.valueOf
                                                                                                 (:stop period))
                                                                                                (>= ed-ms))
                                                                                            (-> (.valueOf
                                                                                                 (:start period))
                                                                                                (<= ed-ms))))))
                                                        planned (->> overlapping-periods
                                                                     (filter :planned))
                                                        p-count (count planned)
                                                        p-ids (->> planned
                                                                   (map :id)
                                                                   set)
                                                        actual (->> overlapping-periods
                                                                    (remove :planned))
                                                        a-count (count actual)
                                                        a-ids (->> actual
                                                                   (map :id)
                                                                   set)
                                                        intersection (clojure.set/intersection 
                                                             p-ids a-ids)]

                                                    ;; figure out the score for the minute
                                                    (cond 
                                                      ;; didn't plan didn't do
                                                      (and
                                                       (= 0 p-count)
                                                       (= 0 a-count)) 0
                                                      ;; planned xor did
                                                      (or
                                                       (= 0 p-count)
                                                       (= 0 a-count)) 1
                                                      ;; planned and did but do not match at all
                                                      (= 0 (count intersection)) 2
                                                      ;; planned and did and match perfectly
                                                      (= p-ids a-ids) 4
                                                      ;; planned and did but only kinda match
                                                      (> 0 (count intersection)) 3))))
                                           ;; add all the minute score together
                                           (reduce +))))))


(0 1122 1440 1314 1272 1050 1236)
time-align-mobile.subs> (def periods-last-7-days (filter 
                                      (fn [p] (-> (:stop p)
                                                  (.valueOf)
                                                  (> (.valueOf
                                                      (helpers/back-n-days 
                                                       (helpers/reset-relative-ms 0 (js/Date.)) 8))))) 
                                      (get-periods app-db :no-op)))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :7:40
 Use of undeclared Var time-align-mobile.subs/get-periods
--------------------------------------------------------------------------------
#'time-align-mobile.subs/periods-last-7-days
time-align-mobile.subs> (->> (range)
                             (take 7)
                             ;; map over the days
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      (->> (range)
                                           (take helpers/day-min)
                                           ;; map over every minute in the day
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)
                                                        ed-ms (.valueOf exact-date)
                                                        overlapping-periods (->> periods-last-7-days
                                                                                 (filter (fn [period]
                                                                                           (and 
                                                                                            (-> (.valueOf
                                                                                                 (:stop period))
                                                                                                (>= ed-ms))
                                                                                            (-> (.valueOf
                                                                                                 (:start period))
                                                                                                (<= ed-ms))))))
                                                        planned (->> overlapping-periods
                                                                     (filter :planned))
                                                        p-count (count planned)
                                                        p-ids (->> planned
                                                                   (map :id)
                                                                   set)
                                                        actual (->> overlapping-periods
                                                                    (remove :planned))
                                                        a-count (count actual)
                                                        a-ids (->> actual
                                                                   (map :id)
                                                                   set)
                                                        intersection (clojure.set/intersection 
                                                             p-ids a-ids)]

                                                    ;; figure out the score for the minute
                                                    (cond 
                                                      ;; didn't plan didn't do
                                                      (and
                                                       (= 0 p-count)
                                                       (= 0 a-count)) 0
                                                      ;; planned xor did
                                                      (or
                                                       (= 0 p-count)
                                                       (= 0 a-count)) 1
                                                      ;; planned and did but do not match at all
                                                      (= 0 (count intersection)) 2
                                                      ;; planned and did and match perfectly
                                                      (= p-ids a-ids) 4
                                                      ;; planned and did but only kinda match
                                                      (> 0 (count intersection)) 3))))
                                           ;; add all the minute score together
                                           (reduce +))))))


(0 1122 1440 1314 1272 1050 1236)
time-align-mobile.subs> (->> (range)
                             (take 7)
                             ;; map over the days
                             (map (fn [days-ago]
                                    (let [day (helpers/back-n-days (js/Date.) days-ago)]
                                      day))))


(#inst "2020-01-06T05:00:00.000-00:00" #inst "2020-01-05T05:00:00.000-00:00" #inst "2020-01-04T05:00:00.000-00:00" #inst "2020-01-03T05:00:00.000-00:00" #inst "2020-01-02T05:00:00.000-00:00" #inst "2020-01-01T05:00:00.000-00:00" #inst "2019-12-31T05:00:00.000-00:00")
time-align-mobile.subs> ;; the first value was zero because today wouldn't have any periods for an app-db that I exported yesterday
time-align-mobile.subs> (->> (range)
                             (take 7)
                             ;; map over the days
                             (map (fn [days-ago]
                                    (let [day (helpers/reset-relative-ms 0 (helpers/back-n-days (js/Date.) days-ago))]
                                      (->> (range)
                                           (take helpers/day-min)
                                           ;; map over every minute in the day
                                           (map (fn [min-of-day]
                                                  (let [exact-date (helpers/reset-relative-ms 
                                                                    (helpers/minutes->ms min-of-day)
                                                                    day)
                                                        ed-ms (.valueOf exact-date)
                                                        overlapping-periods (->> periods-last-7-days
                                                                                 (filter (fn [period]
                                                                                           (and 
                                                                                            (-> (.valueOf
                                                                                                 (:stop period))
                                                                                                (>= ed-ms))
                                                                                            (-> (.valueOf
                                                                                                 (:start period))
                                                                                                (<= ed-ms))))))
                                                        planned (->> overlapping-periods
                                                                     (filter :planned))
                                                        p-count (count planned)
                                                        p-ids (->> planned
                                                                   (map :id)
                                                                   set)
                                                        actual (->> overlapping-periods
                                                                    (remove :planned))
                                                        a-count (count actual)
                                                        a-ids (->> actual
                                                                   (map :id)
                                                                   set)
                                                        intersection (clojure.set/intersection 
                                                             p-ids a-ids)]

                                                    {:day }
                                                    ;; figure out the score for the minute
                                                    (cond 
                                                      ;; didn't plan didn't do
                                                      (and
                                                       (= 0 p-count)
                                                       (= 0 a-count)) 0
                                                      ;; planned xor did
                                                      (or
                                                       (= 0 p-count)
                                                       (= 0 a-count)) 1
                                                      ;; planned and did but do not match at all
                                                      (= 0 (count intersection)) 2
                                                      ;; planned and did and match perfectly
                                                      (= p-ids a-ids) 4
                                                      ;; planned and did but only kinda match
                                                      (> 0 (count intersection)) 3))))
                                           ;; add all the minute score together
                                           (reduce +))))))


;; output cleared

time-align-mobile.subs> (->> (range)
                             (take 7)
                             ;; map over the days
                             (map (fn [days-ago]
                                    (let [day (helpers/reset-relative-ms 
                                               0 
                                               (helpers/back-n-days (js/Date.) days-ago))

                                          score
                                          (->> (range)
                                               (take helpers/day-min)
                                               ;; map over every minute in the day
                                               (map (fn [min-of-day]
                                                      (let [exact-date (helpers/reset-relative-ms 
                                                                        (helpers/minutes->ms min-of-day)
                                                                        day)
                                                            ed-ms (.valueOf exact-date)
                                                            overlapping-periods (->> periods-last-7-days
                                                                                     (filter (fn [period]
                                                                                               (and 
                                                                                                (-> (.valueOf
                                                                                                     (:stop period))
                                                                                                    (>= ed-ms))
                                                                                                (-> (.valueOf
                                                                                                     (:start period))
                                                                                                    (<= ed-ms))))))
                                                            planned (->> overlapping-periods
                                                                         (filter :planned))
                                                            p-count (count planned)
                                                            p-ids (->> planned
                                                                       (map :id)
                                                                       set)
                                                            actual (->> overlapping-periods
                                                                        (remove :planned))
                                                            a-count (count actual)
                                                            a-ids (->> actual
                                                                       (map :id)
                                                                       set)
                                                            intersection (clojure.set/intersection 
                                                                          p-ids a-ids)]

                                                        ;; figure out the score for the minute
                                                        (cond 
                                                          ;; didn't plan didn't do
                                                          (and
                                                           (= 0 p-count)
                                                           (= 0 a-count)) 0
                                                          ;; planned xor did
                                                          (or
                                                           (= 0 p-count)
                                                           (= 0 a-count)) 1
                                                          ;; planned and did but do not match at all
                                                          (= 0 (count intersection)) 2
                                                          ;; planned and did and match perfectly
                                                          (= p-ids a-ids) 4
                                                          ;; planned and did but only kinda match
                                                          (> 0 (count intersection)) 3))))
                                               ;; add all the minute score together
                                               (reduce +))]
                                      {:score score :day day}))))


({:score 0, :day #inst "2020-01-06T05:00:00.000-00:00"} {:score 1122, :day #inst "2020-01-05T05:00:00.000-00:00"} {:score 1440, :day #inst "2020-01-04T05:00:00.000-00:00"} {:score 1314, :day #inst "2020-01-03T05:00:00.000-00:00"} {:score 1272, :day #inst "2020-01-02T05:00:00.000-00:00"} {:score 1050, :day #inst "2020-01-01T05:00:00.000-00:00"} {:score 1236, :day #inst "2019-12-31T05:00:00.000-00:00"})
time-align-mobile.subs> (def max-score (* helpers/day-min 4))
#'time-align-mobile.subs/max-score
time-align-mobile.subs> max-score
5760
time-align-mobile.subs> (clj->js {:a {:b {:c 1}}})
#js {:a #js {:b #js {:c 1}}}
time-align-mobile.subs> (clj->js {:a {:b {:c 1} :btwo [1 2 3 "5"]}})
#js {:a #js {:b #js {:c 1}, :btwo #js [1 2 3 "5"]}}[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 3 warnings, 0.64s)

------ WARNING #1 - :redef-in-file ---------------------------------------------
 File: /home/justin/projects/time-align-mobile/src/main/time_align_mobile/subs.cljs:573:1
--------------------------------------------------------------------------------
 570 |                                             (->> theme :colors :planned)
 571 |                                             (if-some [opacity %] opacity 1)))})])})))
 572 | 
 573 | (defn get-scores [db _]
-------^------------------------------------------------------------------------
 get-scores at line 398 is being replaced
--------------------------------------------------------------------------------
 574 |   (let [periods-last-7-day (filter
 575 |                             (fn [p] (-> (:stop p)
 576 |                                         (.valueOf)
 577 |                                         (> (.valueOf
--------------------------------------------------------------------------------

------ WARNING #2 - :undeclared-var --------------------------------------------
 File: /home/justin/projects/time-align-mobile/src/main/time_align_mobile/subs.cljs:599:70
--------------------------------------------------------------------------------
 596 |                                                         (helpers/minutes->ms min-of-day)
 597 |                                                         day)
 598 |                                             ed-ms (.valueOf exact-date)
 599 |                                             overlapping-periods (->> periods-last-7-days
----------------------------------------------------------------------------^---
 Use of undeclared Var time-align-mobile.subs/periods-last-7-days
--------------------------------------------------------------------------------
 600 |                                                                      (filter (fn [period]
 601 |                                                                                (and
 602 |                                                                                 (-> (.valueOf
 603 |                                                                                      (:stop period))
--------------------------------------------------------------------------------

------ WARNING #3 - :undeclared-var --------------------------------------------
 File: /home/justin/projects/time-align-mobile/src/main/time_align_mobile/subs.cljs:650:42
--------------------------------------------------------------------------------
 647 |                    (map (fn [{:keys [score day]}]
 648 |                           (helpers/day-of-week (.getDay day))))
 649 |                    reverse)
 650 |       :datasets [{:data (->> scores (map score) reverse)}]})))
------------------------------------------------^-------------------------------
 Use of undeclared Var time-align-mobile.subs/score
--------------------------------------------------------------------------------
 651 | 
 652 | ;; (defn get-contribution-three-month [db _]
 653 | ;;   (let [selected-bucket-id ]))
 654 | 
--------------------------------------------------------------------------------
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 2 warnings, 0.63s)

------ WARNING #1 - :redef-in-file ---------------------------------------------
 File: /home/justin/projects/time-align-mobile/src/main/time_align_mobile/subs.cljs:573:1
--------------------------------------------------------------------------------
 570 |                                             (->> theme :colors :planned)
 571 |                                             (if-some [opacity %] opacity 1)))})])})))
 572 | 
 573 | (defn get-scores [db _]
-------^------------------------------------------------------------------------
 get-scores at line 398 is being replaced
--------------------------------------------------------------------------------
 574 |   (let [periods-last-7-day (filter
 575 |                             (fn [p] (-> (:stop p)
 576 |                                         (.valueOf)
 577 |                                         (> (.valueOf
--------------------------------------------------------------------------------

------ WARNING #2 - :undeclared-var --------------------------------------------
 File: /home/justin/projects/time-align-mobile/src/main/time_align_mobile/subs.cljs:599:70
--------------------------------------------------------------------------------
 596 |                                                         (helpers/minutes->ms min-of-day)
 597 |                                                         day)
 598 |                                             ed-ms (.valueOf exact-date)
 599 |                                             overlapping-periods (->> periods-last-7-days
----------------------------------------------------------------------------^---
 Use of undeclared Var time-align-mobile.subs/periods-last-7-days
--------------------------------------------------------------------------------
 600 |                                                                      (filter (fn [period]
 601 |                                                                                (and
 602 |                                                                                 (-> (.valueOf
 603 |                                                                                      (:stop period))
--------------------------------------------------------------------------------
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 1 warnings, 0.59s)

------ WARNING #1 - :redef-in-file ---------------------------------------------
 File: /home/justin/projects/time-align-mobile/src/main/time_align_mobile/subs.cljs:573:1
--------------------------------------------------------------------------------
 570 |                                             (->> theme :colors :planned)
 571 |                                             (if-some [opacity %] opacity 1)))})])})))
 572 | 
 573 | (defn get-scores [db _]
-------^------------------------------------------------------------------------
 get-scores at line 398 is being replaced
--------------------------------------------------------------------------------
 574 |   (let [periods-last-7-days (filter
 575 |                              (fn [p] (-> (:stop p)
 576 |                                          (.valueOf)
 577 |                                          (> (.valueOf
--------------------------------------------------------------------------------
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.62s)
[:app] Compiling ...
[:app] Build completed. (216 files, 2 compiled, 0 warnings, 0.71s)

time-align-mobile.subs> 