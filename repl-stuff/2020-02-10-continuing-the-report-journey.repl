;; Connected to nREPL server - nrepl://localhost:8202
;; CIDER 0.24.0snapshot (package: 20191129.901), nREPL 0.6.0
;; Clojure 1.10.1, Java 11.0.5
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
;; ======================================================================
;; If you’re new to CIDER it is highly recommended to go through its
;; manual first. Type <M-x cider-view-manual> to view it.
;; In case you’re seeing any warnings you should consult the manual’s
;; "Troubleshooting" section.
;;
;; Here are few tips to get you started:
;;
;; * Press <C-h m> to see a list of the keybindings available (this
;;   will work in every Emacs buffer)
;; * Press <, ,> to quickly invoke some REPL command
;; * Press <, s s> to switch between the REPL and a Clojure file
;; * Press <M-x cider-find-var> to jump to the source of something (e.g. a var, a
;;   Java method)
;; * Press <, h h> to view the documentation for something (e.g.
;;   a var, a Java method)
;; * Enable ‘eldoc-mode’ to display function & method signatures in the minibuffer.
;; * Print CIDER’s refcard and keep it close to your keyboard.
;;
;; CIDER is super customizable - try <M-x customize-group cider> to
;; get a feel for this. If you’re thirsty for knowledge you should try
;; <M-x cider-drink-a-sip>.
;;
;; If you think you’ve encountered a bug (or have some suggestions for
;; improvements) use <M-x cider-report-bug> to report it.
;;
;; Above all else - don’t panic! In case of an emergency - procure
;; some (hard) cider and enjoy it responsibly!
;;
;; You can remove this message with the <M-x cider-repl-clear-help-banner> command.
;; You can disable it from appearing on start by setting
;; ‘cider-repl-display-help-banner’ to nil.
;; ======================================================================
;; Please, consider taking part in the State of CIDER survey
;; https://forms.gle/Cp6DW2zGUQkh42u38
;; Your feedback means a lot to us!
;; ======================================================================
;;  Startup: /usr/bin/npx shadow-cljs -d nrepl:0.6.0 -d cider/piggieback:0.4.2 -d refactor-nrepl:2.5.0-SNAPSHOT -d cider/cider-nrepl:0.23.0-SNAPSHOT server
;;
;; ClojureScript REPL type: shadow
;; ClojureScript REPL init form: (do (require '[shadow.cljs.devtools.api :as shadow]) (shadow/watch :app) (shadow/nrepl-select :app))
;;
[:app] Configuring build.
[:app] Compiling ...
[:app] Build completed. (218 files, 13 compiled, 0 warnings, 5.72s)
To quit, type: :cljs/quit
[:selected :app]WARNING: clj-refactor and refactor-nrepl are out of sync.
Their versions are 2.5.0-SNAPSHOT (package: 20191223.917) and n/a, respectively.
You can mute this warning by changing cljr-suppress-middleware-warnings.shadow.user> 
cljs.user> (+ 1 1)
2
cljs.user> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :37:31
 Use of undeclared Var cljs.user/transform
--------------------------------------------------------------------------------
------ WARNING - :undeclared-ns ------------------------------------------------
 Resource: :38:32
 No such namespace: sp, could not locate sp.cljs, sp.cljc, or JavaScript source providing "sp"
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :38:32
 Use of undeclared Var sp/MAP-VALS
--------------------------------------------------------------------------------
------ WARNING - :undeclared-ns ------------------------------------------------
 Resource: :38:44
 No such namespace: sp, could not locate sp.cljs, sp.cljc, or JavaScript source providing "sp"
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :38:44
 Use of undeclared Var sp/MAP-VALS
--------------------------------------------------------------------------------
------ WARNING - :undeclared-ns ------------------------------------------------
 Resource: :38:56
 No such namespace: sp, could not locate sp.cljs, sp.cljc, or JavaScript source providing "sp"
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :38:56
 Use of undeclared Var sp/MAP-VALS
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :19:31
 Use of undeclared Var cljs.user/transform
--------------------------------------------------------------------------------
------ WARNING - :undeclared-ns ------------------------------------------------
 Resource: :20:32
 No such namespace: sp, could not locate sp.cljs, sp.cljc, or JavaScript source providing "sp"
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :20:32
 Use of undeclared Var sp/MAP-VALS
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :27:39
 Use of undeclared Var cljs.user/transform
--------------------------------------------------------------------------------
------ WARNING - :undeclared-ns ------------------------------------------------
 Resource: :27:50
 No such namespace: sp, could not locate sp.cljs, sp.cljc, or JavaScript source providing "sp"
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :27:50
 Use of undeclared Var sp/MAP-VALS
--------------------------------------------------------------------------------
------ WARNING - :undeclared-ns ------------------------------------------------
 Resource: :9:41
 No such namespace: helpers, could not locate helpers.cljs, helpers.cljc, or JavaScript source providing "helpers"
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :9:41
 Use of undeclared Var helpers/reset-relative-ms
--------------------------------------------------------------------------------
------ WARNING - :undeclared-ns ------------------------------------------------
 Resource: :2:26
 No such namespace: subs, could not locate subs.cljs, subs.cljc, or JavaScript source providing "subs"
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :2:26
 Use of undeclared Var subs/get-periods
--------------------------------------------------------------------------------
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :1:14
 Use of undeclared Var cljs.user/db
--------------------------------------------------------------------------------

eval code
eval@[native code]

shadow$cljs$devtools$client$env$repl_call
shadow$cljs$devtools$client$react_native$repl_invoke
shadow$cljs$devtools$client$react_native$handle_message

shadow$cljs$devtools$client$env$process_next_BANG_
shadow$cljs$devtools$client$env$process_ws_msg
onmessage
dispatchEvent@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:30984:31
http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:32152:31
emit@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:5591:42
__callFunction@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4886:49
http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4643:31
__guard@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4840:15
callFunctionReturnFlushedQueue@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4642:21
callFunctionReturnFlushedQueue@[native code]
cljs.user> (+ 1 1)
2
cljs.user> (ns time-align-mobile.handlers
             (:require
              [time-align-mobile.js-imports :refer [write-file-to-dd!
                                                    alert
                                                    version
                                                    share
                                                    format-date
                                                    email-export
                                                    share-file!
                                                    amplitude-log-event-with-properties]]
              [re-frame.core :refer [reg-event-db ->interceptor reg-event-fx reg-fx dispatch]]
              ;; [zprint.core :refer [zprint]]
              [cljs.reader :refer [read-string]]
              [clojure.spec.alpha :as s]
              [time-align-mobile.db :as db :refer [app-db app-db-spec period-data-spec]]
              [time-align-mobile.components.day :refer [snap-bottom-sheet bottom-sheet-ref]]
              [time-align-mobile.subs :as subs]
              [time-align-mobile.components.day :refer [snap-bottom-sheet]]
              [time-align-mobile.helpers :as helpers :refer [same-day?
                                                             get-ms
                                                             deep-merge
                                                             bucket-path
                                                             buckets-path
                                                             combine-paths
                                                             period-selections-path
                                                             period-path-sub-bucket
                                                             period-path-insert
                                                             period-path-no-bucket-id
                                                             period-path
                                                             periods-path
                                                             template-selections-path
                                                             template-path-no-pattern-id]]
              [com.rpl.specter :as sp :refer-macros [select select-one setval transform selected-any?]]))
niltime-align-mobile.handlerstime-align-mobile.handlers
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :1:14
 Use of undeclared Var time-align-mobile.handlers/db
--------------------------------------------------------------------------------
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (-> wip vec (nth 4))
cljs$core$vector_index_out_of_bounds
cljs$core$array_for
cljs$core$IIndexed$_nth$arity$2
cljs$core$IFn$_invoke$arity$2
cljs$core$nth
eval code
eval@[native code]

shadow$cljs$devtools$client$env$repl_call
shadow$cljs$devtools$client$react_native$repl_invoke
shadow$cljs$devtools$client$react_native$handle_message

shadow$cljs$devtools$client$env$process_next_BANG_
shadow$cljs$devtools$client$env$process_ws_msg
onmessage
dispatchEvent@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:30984:31
http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:32152:31
emit@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:5591:42
__callFunction@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4886:49
http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4643:31
__guard@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4840:15
callFunctionReturnFlushedQueue@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4642:21
callFunctionReturnFlushedQueue@[native code]
time-align-mobile.handlers> wip
{}
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :1:14
 Use of undeclared Var time-align-mobile.handlers/db
--------------------------------------------------------------------------------
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (def @re-frame.db/app-db)
;; output cleared
time-align-mobile.handlers> (def db @re-frame.db/app-db)
#'time-align-mobile.handlers/db
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (-> wip vec (nth 4))
[1573534800000 {:actual {#uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a" {:periods [{:color "#8b8b8b", :planned false, :bucket-label "🤹‍♂️ misc", :start #inst "2019-11-12T17:11:10.225-00:00", :created #inst "2019-11-12T17:11:10.225-00:00", :stop #inst "2019-11-12T17:57:28.362-00:00", :label "Driving home, getting car washed, and getting taco Bell", :id #uuid "64b924f0-f29c-40d9-814d-bfd03799ba9b", :last-edited #inst "2019-11-12T17:35:58.188-00:00", :bucket-id #uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a", :data {}} {:color "#8b8b8b", :planned false, :bucket-label "🤹‍♂️ misc", :start #inst "2019-11-12T14:20:56.021-00:00", :created #inst "2019-11-12T14:20:56.021-00:00", :stop #inst "2019-11-12T14:41:44.778-00:00", :label "", :id #uuid "ebe4ece3-2830-42e3-a73d-fb4a3e284b3a", :last-edited #inst "2019-11-12T14:20:56.021-00:00", :bucket-id #uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a", :data {}}], :total-duration 4026894}, #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493" {:periods [{:color "#98ff11", :planned false, :bucket-label "🥘 food", :start #inst "2019-11-12T13:16:21.316-00:00", :created #inst "2019-11-12T13:16:21.316-00:00", :stop #inst "2019-11-12T13:33:00.000-00:00", :label "Making breakfast", :id #uuid "def71b1d-087d-479d-853e-9c4162d6daad", :last-edited #inst "2019-11-12T13:39:03.291-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}} {:color "#98ff11", :planned false, :bucket-label "🥘 food", :start #inst "2019-11-12T17:57:36.824-00:00", :created #inst "2019-11-12T17:57:36.824-00:00", :stop #inst "2019-11-12T18:20:00.000-00:00", :label "", :id #uuid "8b63ce75-7461-489a-9917-9040ad206fbe", :last-edited #inst "2019-11-12T18:40:46.692-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}}], :total-duration 2341860}, #uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:periods [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2019-11-12T14:02:29.133-00:00", :created #inst "2019-11-12T14:02:29.133-00:00", :stop #inst "2019-11-12T14:20:35.623-00:00", :label "Shoveling and switching cars", :id #uuid "62d051ba-da83-49df-9703-3db4bec57a75", :last-edited #inst "2019-11-12T14:20:49.338-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2019-11-12T13:34:00.000-00:00", :created #inst "2019-11-12T13:39:06.674-00:00", :stop #inst "2019-11-12T14:02:22.489-00:00", :label "Getting ready", :id #uuid "6bd64479-285e-4171-b32e-7307de68c8b5", :last-edited #inst "2019-11-12T14:02:49.988-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2019-11-12T22:14:08.229-00:00", :created #inst "2019-11-12T22:14:08.229-00:00", :stop #inst "2019-11-12T22:26:00.000-00:00", :label "Putting clothes away", :id #uuid "dfa2b8dc-0344-4bdf-a8c8-20073d01e56d", :last-edited #inst "2019-11-12T22:30:02.363-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}], :total-duration 3500750}, #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:periods [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2019-11-13T03:06:34.639-00:00", :created #inst "2019-11-13T03:06:34.639-00:00", :stop #inst "2019-11-13T13:03:13.317-00:00", :label "", :id #uuid "39af28ad-d25e-484c-bff0-6a74e3d696dc", :last-edited #inst "2019-11-13T03:06:34.639-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}], :total-duration 35798678}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:periods [{:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2019-11-12T22:40:00.000-00:00", :created #inst "2019-11-13T00:57:28.285-00:00", :stop #inst "2019-11-13T00:04:00.000-00:00", :label "Lifting", :id #uuid "d8cd3605-dfa2-48f6-9b86-4e963ff47531", :last-edited #inst "2019-11-13T00:58:01.064-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}} {:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2019-11-12T12:47:35.716-00:00", :created #inst "2019-11-11T01:51:20.902-00:00", :stop #inst "2019-11-12T12:56:13.893-00:00", :label "Doing Wim Hoff breathing", :id #uuid "94a744b0-98ce-40f4-8216-8d8437371480", :last-edited #inst "2019-11-11T14:35:11.045-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}} {:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2019-11-12T12:59:33.309-00:00", :created #inst "2019-11-12T12:59:33.309-00:00", :stop #inst "2019-11-12T13:12:12.287-00:00", :label "Doing posture workout", :id #uuid "c926796f-fcfb-4bca-889e-f682b1d1a645", :last-edited #inst "2019-11-12T12:59:50.464-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}], :total-duration 6317155}, #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832" {:periods [{:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2019-11-12T14:41:50.736-00:00", :created #inst "2019-11-12T14:41:50.736-00:00", :stop #inst "2019-11-12T17:11:04.889-00:00", :label "", :id #uuid "88ba47af-cc30-4640-bc08-de9bfe6b9ba6", :last-edited #inst "2019-11-12T14:41:50.736-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}} {:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2019-11-12T19:00:00.000-00:00", :created #inst "2019-11-12T19:51:43.298-00:00", :stop #inst "2019-11-12T22:12:01.336-00:00", :label "", :id #uuid "8e0308c3-af2d-4787-b4ca-32490a6af668", :last-edited #inst "2019-11-12T19:51:48.426-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}}], :total-duration 20475489}, #uuid "7dbb8f37-f79d-4121-91d2-bb70fd8eaece" {:periods [{:color "#11a5ff", :planned false, :bucket-label "🌱 growth", :start #inst "2019-11-13T00:30:00.000-00:00", :created #inst "2019-11-13T00:58:12.662-00:00", :stop #inst "2019-11-13T02:10:00.000-00:00", :label "Looking into datomic and project planning time sink", :id #uuid "d8d1d499-13d9-4c0d-beb9-6e677662eaf5", :last-edited #inst "2019-11-13T02:08:02.072-00:00", :bucket-id #uuid "7dbb8f37-f79d-4121-91d2-bb70fd8eaece", :data {}}], :total-duration 6000000}}}]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:actual 
                                 (merge actual
                                        {:total-duration
                                         (->> actual
                                              (select [sp/MAP-VALS :total-duration])
                                              (reduce +))})
                                 :planned 
                                 (merge :planned
                                        {:total-duration
                                         (->> planned
                                              (select [sp/MAP-VALS :total-duration])
                                              (reduce +))})})))))
;; output cleared

time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:actual 
                                 (merge actual
                                        {:total-duration
                                         (->> actual
                                              (select [sp/MAP-VALS :total-duration])
                                              (reduce +))})
                                 :planned 
                                 (merge :planned
                                        {:total-duration
                                         (->> planned
                                              (select [sp/MAP-VALS :total-duration])
                                              (reduce +))})})))))
;; output cleared

time-align-mobile.handlers> (+ 1 1)
2
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:actual 
                                 (merge actual
                                        {:total-duration
                                         (->> actual
                                              (select [sp/MAP-VALS :total-duration])
                                              (reduce +))})
                                 :planned 
                                 (merge :planned
                                        {:total-duration
                                         (->> planned
                                              (select [sp/MAP-VALS :total-duration])
                                              (reduce +))})})))))
(+ 1 1)
cljs$core$missing_protocol
cljs$core$_conj
cljs$core$IFn$_invoke$arity$2


cljs$core$IFn$_invoke$arity$4
cljs$core$IReduce$_reduce$arity$2
cljs$core$IFn$_invoke$arity$2
cljs$core$IFn$_invoke$arity$variadic
cljs$core$merge

com$rpl$specter$impl$terminal_STAR_

next_fn


cljs$core$inode_kv_reduce
kv_reduce

cljs$core$inode_kv_reduce
kv_reduce

cljs$core$inode_kv_reduce
kv_reduce
cljs$core$IKVReduce$_kv_reduce$arity$3
cljs$core$_kv_reduce
cljs$core$reduce_kv
com$rpl$specter$navs$MapTransformProtocol$map_vals_transform$arity$2
com$rpl$specter$navs$map_vals_transform
com$rpl$specter$protocols$RichNavigator$transform_STAR_$arity$4
com$rpl$specter$impl$exec_transform_STAR_
com$rpl$specter$impl$compiled_transform_STAR_

eval code
eval@[native code]

shadow$cljs$devtools$client$env$repl_call
shadow$cljs$devtools$client$react_native$repl_invoke
shadow$cljs$devtools$client$react_native$handle_message

shadow$cljs$devtools$client$env$process_next_BANG_
shadow$cljs$devtools$client$env$process_ws_msg
onmessage
dispatchEvent@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:30984:31
http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:32152:31
emit@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:5591:42
__callFunction@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4886:49
http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4643:31
__guard@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4840:15
callFunctionReturnFlushedQueue@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4642:21
callFunctionReturnFlushedQueue@[native code]2
time-align-mobile.handlers> (+ 1 1)
2
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:actual 
                                 (merge actual
                                        {:total-duration
                                         (->> actual
                                              (select [sp/MAP-VALS :total-duration])
                                              (flatten)
                                              (reduce +))})
                                 :planned 
                                 (merge :planned
                                        {:total-duration
                                         (->> planned
                                              (select [sp/MAP-VALS :total-duration])
                                              (flatten)
                                              (reduce +))})})))))
;; output cleared

time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [thing]
                                thing)))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (first wip)
[1581138000000 {:actual {#uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:periods [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T19:06:00.119-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:44:11.240-00:00", :label "", :id #uuid "c5e2033c-eeed-47bf-be7d-8c4be7febaf7", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T13:26:22.884-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T14:11:22.884-00:00", :label "", :id #uuid "6a394de1-e031-4c50-b510-64d4605a784f", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:44:23.643-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:45:10.827-00:00", :label "", :id #uuid "6b5e0b24-2223-425e-9394-642f8709ca71", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:45:15.320-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:22:42.420-00:00", :label "", :id #uuid "144ef831-6d82-45c8-8fd4-25c69f0711ad", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}], :total-duration 14485405}, #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:periods [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T22:24:40.668-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:25:44.150-00:00", :label "", :id #uuid "ee21b67c-b2fd-4909-a3e0-98f6a6fb4ff6", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}} {:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T20:23:00.000-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:24:01.222-00:00", :label "", :id #uuid "de5d348e-34dd-47f7-9d4b-7abc284a2cb2", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}], :total-duration 7324704}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:periods [{:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2020-02-08T22:26:01.743-00:00", :created #inst "2020-02-08T22:26:01.743-00:00", :stop #inst "2020-02-08T22:28:13.951-00:00", :label "", :id #uuid "083bd923-cb53-4bd5-bdf6-c67d55c75c28", :last-edited #inst "2020-02-08T22:26:01.743-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}], :total-duration 132208}}}]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:planned (->> planned
                                              (select [sp/MAP-VALS :total-duration]))
                                :actual  (->> actual
                                              (select [sp/MAP-VALS :total-duration]))})))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (first wip)
[1581138000000 {:planned [], :actual [14485405 7324704 132208]}]
time-align-mobile.handlers> (reduce + [])
0
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:planned (merge planned
                                                 {:total-duration (->> planned
                                                                       (select [sp/MAP-VALS :total-duration]))})
                                :actual  (merge planned
                                                 {:total-duration (->> actual
                                                                       (select [sp/MAP-VALS :total-duration]))})})))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (first wip)
[1581138000000 {:planned {:total-duration []}, :actual {:total-duration [14485405 7324704 132208]}}]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:planned (merge planned
                                                 {:total-duration (->> planned
                                                                       (select [sp/MAP-VALS :total-duration]))})
                                :actual  (merge actual
                                                 {:total-duration (->> actual
                                                                       (select [sp/MAP-VALS :total-duration]))})})))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (first wip)
[1581138000000 {:planned {:total-duration []}, :actual {#uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:periods [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T19:06:00.119-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:44:11.240-00:00", :label "", :id #uuid "c5e2033c-eeed-47bf-be7d-8c4be7febaf7", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T13:26:22.884-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T14:11:22.884-00:00", :label "", :id #uuid "6a394de1-e031-4c50-b510-64d4605a784f", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:44:23.643-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:45:10.827-00:00", :label "", :id #uuid "6b5e0b24-2223-425e-9394-642f8709ca71", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:45:15.320-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:22:42.420-00:00", :label "", :id #uuid "144ef831-6d82-45c8-8fd4-25c69f0711ad", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}], :total-duration 14485405}, #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:periods [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T22:24:40.668-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:25:44.150-00:00", :label "", :id #uuid "ee21b67c-b2fd-4909-a3e0-98f6a6fb4ff6", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}} {:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T20:23:00.000-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:24:01.222-00:00", :label "", :id #uuid "de5d348e-34dd-47f7-9d4b-7abc284a2cb2", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}], :total-duration 7324704}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:periods [{:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2020-02-08T22:26:01.743-00:00", :created #inst "2020-02-08T22:26:01.743-00:00", :stop #inst "2020-02-08T22:28:13.951-00:00", :label "", :id #uuid "083bd923-cb53-4bd5-bdf6-c67d55c75c28", :last-edited #inst "2020-02-08T22:26:01.743-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}], :total-duration 132208}, :total-duration [14485405 7324704 132208]}}]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:planned (merge planned
                                                 {:total-duration (->> planned
                                                                       (select [sp/MAP-VALS :total-duration]))})
                                :actual  (merge actual
                                                 {:total-duration (->> actual
                                                                       (select [sp/MAP-VALS :total-duration]))})})))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:planned (merge planned
                                                 {:total-duration (->> planned
                                                                       (select [sp/MAP-VALS :total-duration])
                                                                       (reduce +))})
                                :actual  (merge actual
                                                 {:total-duration (->> actual
                                                                       (select [sp/MAP-VALS :total-duration])
                                                                       (reduce +))})})))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (first wip)
[1581138000000 {:planned {:total-duration 0}, :actual {#uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:periods [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T19:06:00.119-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:44:11.240-00:00", :label "", :id #uuid "c5e2033c-eeed-47bf-be7d-8c4be7febaf7", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T13:26:22.884-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T14:11:22.884-00:00", :label "", :id #uuid "6a394de1-e031-4c50-b510-64d4605a784f", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:44:23.643-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:45:10.827-00:00", :label "", :id #uuid "6b5e0b24-2223-425e-9394-642f8709ca71", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:45:15.320-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:22:42.420-00:00", :label "", :id #uuid "144ef831-6d82-45c8-8fd4-25c69f0711ad", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}], :total-duration 14485405}, #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:periods [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T22:24:40.668-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:25:44.150-00:00", :label "", :id #uuid "ee21b67c-b2fd-4909-a3e0-98f6a6fb4ff6", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}} {:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T20:23:00.000-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:24:01.222-00:00", :label "", :id #uuid "de5d348e-34dd-47f7-9d4b-7abc284a2cb2", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}], :total-duration 7324704}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:periods [{:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2020-02-08T22:26:01.743-00:00", :created #inst "2020-02-08T22:26:01.743-00:00", :stop #inst "2020-02-08T22:28:13.951-00:00", :label "", :id #uuid "083bd923-cb53-4bd5-bdf6-c67d55c75c28", :last-edited #inst "2020-02-08T22:26:01.743-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}], :total-duration 132208}, :total-duration 21942317}}]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by track and then by bucket-id
                        ;; the total result:
                        ;; {1581138000000 {:actual  {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; this is adding up all the total durations from the previous step
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;;                           total-duration 264416}
                        ;;                 :planned {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;;                           total-duration 264416}
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:planned (merge planned
                                                 {:total-duration (->> planned
                                                                       (select [sp/MAP-VALS :total-duration])
                                                                       (reduce +))})
                                :actual  (merge actual
                                                 {:total-duration (->> actual
                                                                       (select [sp/MAP-VALS :total-duration])
                                                                       (reduce +))})})))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (def ratios (->> wip
                                             (transform [sp/MAP-VALS])
                                             (fn [{:keys [actual planned]}]
                                               (let [actual-total  (:total-duration actual)
                                                     planned-total (:total-duration planned)]
                                                 (/ actual planned)))))
------ REPL Error while processing ---------------------------------------------
(def ratios (->> wip
                                             (transform [sp/MAP-VALS])
                                             (fn [{:keys [actual planned]}]
                                               (let [actual-total  (:total-duration actual)
                                                     planned-total (:total-duration planned)]
                                                 (/ actual planned)))))
Error in phase :compilation
Wrong number of args (2) passed to: com.rpl.specter/transform
time-align-mobile.handlers> (def ratios (->> wip
                                             (transform [sp/MAP-VALS]
                                                        (fn [{:keys [actual planned]}]
                                                          (let [actual-total  (:total-duration actual)
                                                                planned-total (:total-duration planned)]
                                                            (/ actual planned))))))
#'time-align-mobile.handlers/ratios
time-align-mobile.handlers> (first ratios)
[1581138000000 ##NaN]
time-align-mobile.handlers> ratios
{1581138000000 ##NaN, 1581051600000 ##NaN, 1573275600000 ##NaN, 1573880400000 ##NaN, 1573534800000 ##NaN, 1573189200000 ##NaN, 1573794000000 ##NaN, 1573448400000 ##NaN, 1574053200000 ##NaN, 1573102800000 ##NaN, 1573707600000 ##NaN, 1573362000000 ##NaN, 1573966800000 ##NaN, 1573016400000 ##NaN, 1573621200000 ##NaN, 1575435600000 ##NaN, 1576040400000 ##NaN, 1574485200000 ##NaN, 1575090000000 ##NaN, 1575694800000 ##NaN, 1574139600000 ##NaN, 1574744400000 ##NaN, 1575349200000 ##NaN, 1575954000000 ##NaN, 1574398800000 ##NaN, 1575003600000 ##NaN, 1575608400000 ##NaN, 1576213200000 ##NaN, 1574658000000 ##NaN, 1575262800000 ##NaN, 1575867600000 ##NaN, 1574312400000 ##NaN, 1574917200000 ##NaN, 1575522000000 ##NaN, 1576126800000 ##NaN, 1574571600000 ##NaN, 1575176400000 ##NaN, 1575781200000 ##NaN, 1574226000000 ##NaN, 1574830800000 ##NaN, 1578200400000 ##NaN, 1576645200000 ##NaN, 1577250000000 ##NaN, 1577854800000 ##NaN, 1576299600000 ##NaN, 1576904400000 ##NaN, 1577509200000 ##NaN, 1578114000000 ##NaN, 1576558800000 ##NaN, 1577163600000 ##NaN, 1577768400000 ##NaN, 1576818000000 ##NaN, 1577422800000 ##NaN, 1578027600000 ##NaN, 1576472400000 ##NaN, 1577077200000 ##NaN, 1577682000000 ##NaN, 1576731600000 ##NaN, 1577336400000 ##NaN, 1577941200000 ##NaN, 1576386000000 ##NaN, 1576990800000 ##NaN, 1577595600000 ##NaN}
time-align-mobile.handlers> (def ratios (->> wip
                                             (transform [sp/MAP-VALS]
                                                        (fn [{:keys [actual planned]}]
                                                          (let [actual-total  (:total-duration actual)
                                                                planned-total (:total-duration planned)]
                                                            (/ actual planned))))))
#'time-align-mobile.handlers/ratios
time-align-mobile.handlers> (min 0 (/ 2 0))
0
time-align-mobile.handlers> (def ratios (->> wip
                                             (transform [sp/MAP-VALS]
                                                        (fn [{:keys [actual planned]}]
                                                          (let [actual-total  (:total-duration actual)
                                                                planned-total (:total-duration planned)]
                                                            (min 0 (/ actual planned)))))))
#'time-align-mobile.handlers/ratios
time-align-mobile.handlers> (ratios)
call
eval code
eval@[native code]

shadow$cljs$devtools$client$env$repl_call
shadow$cljs$devtools$client$react_native$repl_invoke
shadow$cljs$devtools$client$react_native$handle_message

shadow$cljs$devtools$client$env$process_next_BANG_
shadow$cljs$devtools$client$env$process_ws_msg
onmessage
dispatchEvent@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:30984:31
http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:32152:31
emit@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:5591:42
__callFunction@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4886:49
http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4643:31
__guard@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4840:15
callFunctionReturnFlushedQueue@http://192.168.1.93:19001/app/index.bundle?platform=android&dev=true&minify=false&hot=false:4642:21
callFunctionReturnFlushedQueue@[native code]
time-align-mobile.handlers> ratios
{1581138000000 ##NaN, 1581051600000 ##NaN, 1573275600000 ##NaN, 1573880400000 ##NaN, 1573534800000 ##NaN, 1573189200000 ##NaN, 1573794000000 ##NaN, 1573448400000 ##NaN, 1574053200000 ##NaN, 1573102800000 ##NaN, 1573707600000 ##NaN, 1573362000000 ##NaN, 1573966800000 ##NaN, 1573016400000 ##NaN, 1573621200000 ##NaN, 1575435600000 ##NaN, 1576040400000 ##NaN, 1574485200000 ##NaN, 1575090000000 ##NaN, 1575694800000 ##NaN, 1574139600000 ##NaN, 1574744400000 ##NaN, 1575349200000 ##NaN, 1575954000000 ##NaN, 1574398800000 ##NaN, 1575003600000 ##NaN, 1575608400000 ##NaN, 1576213200000 ##NaN, 1574658000000 ##NaN, 1575262800000 ##NaN, 1575867600000 ##NaN, 1574312400000 ##NaN, 1574917200000 ##NaN, 1575522000000 ##NaN, 1576126800000 ##NaN, 1574571600000 ##NaN, 1575176400000 ##NaN, 1575781200000 ##NaN, 1574226000000 ##NaN, 1574830800000 ##NaN, 1578200400000 ##NaN, 1576645200000 ##NaN, 1577250000000 ##NaN, 1577854800000 ##NaN, 1576299600000 ##NaN, 1576904400000 ##NaN, 1577509200000 ##NaN, 1578114000000 ##NaN, 1576558800000 ##NaN, 1577163600000 ##NaN, 1577768400000 ##NaN, 1576818000000 ##NaN, 1577422800000 ##NaN, 1578027600000 ##NaN, 1576472400000 ##NaN, 1577077200000 ##NaN, 1577682000000 ##NaN, 1576731600000 ##NaN, 1577336400000 ##NaN, 1577941200000 ##NaN, 1576386000000 ##NaN, 1576990800000 ##NaN, 1577595600000 ##NaN}
time-align-mobile.handlers> (/ 1 0)
##Inf
time-align-mobile.handlers> (/ 0 1)
0
time-align-mobile.handlers> (first wip)
[1581138000000 {:planned {:total-duration 0}, :actual {#uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:periods [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T19:06:00.119-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:44:11.240-00:00", :label "", :id #uuid "c5e2033c-eeed-47bf-be7d-8c4be7febaf7", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T13:26:22.884-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T14:11:22.884-00:00", :label "", :id #uuid "6a394de1-e031-4c50-b510-64d4605a784f", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:44:23.643-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:45:10.827-00:00", :label "", :id #uuid "6b5e0b24-2223-425e-9394-642f8709ca71", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:45:15.320-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:22:42.420-00:00", :label "", :id #uuid "144ef831-6d82-45c8-8fd4-25c69f0711ad", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}], :total-duration 14485405}, #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:periods [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T22:24:40.668-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:25:44.150-00:00", :label "", :id #uuid "ee21b67c-b2fd-4909-a3e0-98f6a6fb4ff6", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}} {:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T20:23:00.000-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:24:01.222-00:00", :label "", :id #uuid "de5d348e-34dd-47f7-9d4b-7abc284a2cb2", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}], :total-duration 7324704}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:periods [{:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2020-02-08T22:26:01.743-00:00", :created #inst "2020-02-08T22:26:01.743-00:00", :stop #inst "2020-02-08T22:28:13.951-00:00", :label "", :id #uuid "083bd923-cb53-4bd5-bdf6-c67d55c75c28", :last-edited #inst "2020-02-08T22:26:01.743-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}], :total-duration 132208}, :total-duration 21942317}}]
time-align-mobile.handlers> (def ratios (->> wip
                                             (transform [sp/MAP-VALS]
                                                        (fn [{:keys [actual planned]}]
                                                          (let [actual-total  (:total-duration actual)
                                                                planned-total (:total-duration planned)]
                                                            {:actual-total actual-total
                                                             :planned-total planned-total})))))
#'time-align-mobile.handlers/ratios
time-align-mobile.handlers> ratios
{1581138000000 {:actual-total 21942317, :planned-total 0}, 1581051600000 {:actual-total 2700000, :planned-total 0}, 1573275600000 {:actual-total 85219034, :planned-total 0}, 1573880400000 {:actual-total 150173027, :planned-total 0}, 1573534800000 {:actual-total 78460826, :planned-total 0}, 1573189200000 {:actual-total 89976883, :planned-total 0}, 1573794000000 {:actual-total 71948069, :planned-total 0}, 1573448400000 {:actual-total 116718661, :planned-total 0}, 1574053200000 {:actual-total 75588382, :planned-total 0}, 1573102800000 {:actual-total 106338827, :planned-total 0}, 1573707600000 {:actual-total 91924191, :planned-total 0}, 1573362000000 {:actual-total 145527865, :planned-total 0}, 1573966800000 {:actual-total 60391703, :planned-total 0}, 1573016400000 {:actual-total 69426634, :planned-total 0}, 1573621200000 {:actual-total 69138737, :planned-total 0}, 1575435600000 {:actual-total 74516794, :planned-total 0}, 1576040400000 {:actual-total 19635245, :planned-total 0}, 1574485200000 {:actual-total 68103636, :planned-total 0}, 1575090000000 {:actual-total 71150524, :planned-total 0}, 1575694800000 {:actual-total 100664887, :planned-total 0}, 1574139600000 {:actual-total 76507965, :planned-total 0}, 1574744400000 {:actual-total 58165989, :planned-total 0}, 1575349200000 {:actual-total 53871555, :planned-total 0}, 1575954000000 {:actual-total 106436919, :planned-total 0}, 1574398800000 {:actual-total 138605828, :planned-total 0}, 1575003600000 {:actual-total 108425322, :planned-total 0}, 1575608400000 {:actual-total 141884519, :planned-total 0}, 1576213200000 {:actual-total 74424385, :planned-total 0}, 1574658000000 {:actual-total 82839311, :planned-total 0}, 1575262800000 {:actual-total 91729515, :planned-total 0}, 1575867600000 {:actual-total 75045246, :planned-total 0}, 1574312400000 {:actual-total 35688598, :planned-total 0}, 1574917200000 {:actual-total 26529139, :planned-total 0}, 1575522000000 {:actual-total 32888318, :planned-total 0}, 1576126800000 {:actual-total 100532789, :planned-total 0}, 1574571600000 {:actual-total 105293191, :planned-total 0}, 1575176400000 {:actual-total 104100780, :planned-total 0}, 1575781200000 {:actual-total 82762445, :planned-total 0}, 1574226000000 {:actual-total 61510780, :planned-total 0}, 1574830800000 {:actual-total 91571220, :planned-total 0}, 1578200400000 {:actual-total 67075131, :planned-total 0}, 1576645200000 {:actual-total 79751265, :planned-total 0}, 1577250000000 {:actual-total 26333174, :planned-total 0}, 1577854800000 {:actual-total 62827282, :planned-total 0}, 1576299600000 {:actual-total 25259244, :planned-total 0}, 1576904400000 {:actual-total 69402491, :planned-total 0}, 1577509200000 {:actual-total 23178637, :planned-total 0}, 1578114000000 {:actual-total 78954268, :planned-total 0}, 1576558800000 {:actual-total 113149526, :planned-total 0}, 1577163600000 {:actual-total 112543337, :planned-total 0}, 1577768400000 {:actual-total 45865192, :planned-total 0}, 1576818000000 {:actual-total 199218037, :planned-total 0}, 1577422800000 {:actual-total 64951472, :planned-total 0}, 1578027600000 {:actual-total 58116790, :planned-total 0}, 1576472400000 {:actual-total 111342522, :planned-total 0}, 1577077200000 {:actual-total 60197456, :planned-total 0}, 1577682000000 {:actual-total 89641006, :planned-total 0}, 1576731600000 {:actual-total 58216261, :planned-total 0}, 1577336400000 {:actual-total 81681603, :planned-total 0}, 1577941200000 {:actual-total 106540969, :planned-total 0}, 1576386000000 {:actual-total 115498004, :planned-total 0}, 1576990800000 {:actual-total 68879577, :planned-total 0}, 1577595600000 {:actual-total 43547254, :planned-total 0}}
time-align-mobile.handlers> (max 0 (/ 1 0))
##Inf
time-align-mobile.handlers> (/ "1" 2)
------ WARNING - :invalid-arithmetic -------------------------------------------
 Resource: :1:1
 cljs.core//, all arguments must be numbers, got [string number] instead
--------------------------------------------------------------------------------
0.5
time-align-mobile.handlers> (def ratios (->> wip
                                             (transform [sp/MAP-VALS]
                                                        (fn [{:keys [actual planned]}]
                                                          (let [actual-total  (:total-duration actual)
                                                                planned-total (:total-duration planned)]
                                                            (/ actual planned))))))
#'time-align-mobile.handlers/ratios
time-align-mobile.handlers> ratios
{1581138000000 ##NaN, 1581051600000 ##NaN, 1573275600000 ##NaN, 1573880400000 ##NaN, 1573534800000 ##NaN, 1573189200000 ##NaN, 1573794000000 ##NaN, 1573448400000 ##NaN, 1574053200000 ##NaN, 1573102800000 ##NaN, 1573707600000 ##NaN, 1573362000000 ##NaN, 1573966800000 ##NaN, 1573016400000 ##NaN, 1573621200000 ##NaN, 1575435600000 ##NaN, 1576040400000 ##NaN, 1574485200000 ##NaN, 1575090000000 ##NaN, 1575694800000 ##NaN, 1574139600000 ##NaN, 1574744400000 ##NaN, 1575349200000 ##NaN, 1575954000000 ##NaN, 1574398800000 ##NaN, 1575003600000 ##NaN, 1575608400000 ##NaN, 1576213200000 ##NaN, 1574658000000 ##NaN, 1575262800000 ##NaN, 1575867600000 ##NaN, 1574312400000 ##NaN, 1574917200000 ##NaN, 1575522000000 ##NaN, 1576126800000 ##NaN, 1574571600000 ##NaN, 1575176400000 ##NaN, 1575781200000 ##NaN, 1574226000000 ##NaN, 1574830800000 ##NaN, 1578200400000 ##NaN, 1576645200000 ##NaN, 1577250000000 ##NaN, 1577854800000 ##NaN, 1576299600000 ##NaN, 1576904400000 ##NaN, 1577509200000 ##NaN, 1578114000000 ##NaN, 1576558800000 ##NaN, 1577163600000 ##NaN, 1577768400000 ##NaN, 1576818000000 ##NaN, 1577422800000 ##NaN, 1578027600000 ##NaN, 1576472400000 ##NaN, 1577077200000 ##NaN, 1577682000000 ##NaN, 1576731600000 ##NaN, 1577336400000 ##NaN, 1577941200000 ##NaN, 1576386000000 ##NaN, 1576990800000 ##NaN, 1577595600000 ##NaN}
time-align-mobile.handlers> (def ratios (->> wip
                                             (transform [sp/MAP-VALS]
                                                        (fn [{:keys [actual planned]}]
                                                          (let [actual-total  (:total-duration actual)
                                                                planned-total (:total-duration planned)]
                                                            (/ actual-total planned-total))))))
#'time-align-mobile.handlers/ratios
time-align-mobile.handlers> ratios
{1581138000000 ##Inf, 1581051600000 ##Inf, 1573275600000 ##Inf, 1573880400000 ##Inf, 1573534800000 ##Inf, 1573189200000 ##Inf, 1573794000000 ##Inf, 1573448400000 ##Inf, 1574053200000 ##Inf, 1573102800000 ##Inf, 1573707600000 ##Inf, 1573362000000 ##Inf, 1573966800000 ##Inf, 1573016400000 ##Inf, 1573621200000 ##Inf, 1575435600000 ##Inf, 1576040400000 ##Inf, 1574485200000 ##Inf, 1575090000000 ##Inf, 1575694800000 ##Inf, 1574139600000 ##Inf, 1574744400000 ##Inf, 1575349200000 ##Inf, 1575954000000 ##Inf, 1574398800000 ##Inf, 1575003600000 ##Inf, 1575608400000 ##Inf, 1576213200000 ##Inf, 1574658000000 ##Inf, 1575262800000 ##Inf, 1575867600000 ##Inf, 1574312400000 ##Inf, 1574917200000 ##Inf, 1575522000000 ##Inf, 1576126800000 ##Inf, 1574571600000 ##Inf, 1575176400000 ##Inf, 1575781200000 ##Inf, 1574226000000 ##Inf, 1574830800000 ##Inf, 1578200400000 ##Inf, 1576645200000 ##Inf, 1577250000000 ##Inf, 1577854800000 ##Inf, 1576299600000 ##Inf, 1576904400000 ##Inf, 1577509200000 ##Inf, 1578114000000 ##Inf, 1576558800000 ##Inf, 1577163600000 ##Inf, 1577768400000 ##Inf, 1576818000000 ##Inf, 1577422800000 ##Inf, 1578027600000 ##Inf, 1576472400000 ##Inf, 1577077200000 ##Inf, 1577682000000 ##Inf, 1576731600000 ##Inf, 1577336400000 ##Inf, 1577941200000 ##Inf, 1576386000000 ##Inf, 1576990800000 ##Inf, 1577595600000 ##Inf}
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual [periods]}
                        ;;                 bucket-id-b [periods]}{:actual  
                        ;;                 :planned {bucket-id-a [periods]
                        ;;                           bucket-id-b [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by 
                                      (fn [period] (if (:planned periods)
                                                     :planned
                                                     :actual)))
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by :bucket-id))))))))
                        ;; add a :total-duration section underneath the bucket key, in ms
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; this is adding up all the total durations from the previous step
                        ;; total results:
                        ;; {1581138000000 {:actual  {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;;                           total-duration 264416}
                        ;;                 :planned {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;;                           total-duration 264416}
                        (->> (transform 
                              [sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                {:planned (merge planned
                                                 {:total-duration (->> planned
                                                                       (select [sp/MAP-VALS :total-duration])
                                                                       (reduce +))})
                                :actual  (merge actual
                                                 {:total-duration (->> actual
                                                                       (select [sp/MAP-VALS :total-duration])
                                                                       (reduce +))})})))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods [periods]}
                        ;;                              :planned {:periods [periods]}}
                        ;;                 bucket-id-b {:actual  {:periods [periods]}
                        ;;                              :planned {:periods [periods]}}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (group-by (fn [period] 
                                                              (if (:planned periods)
                                                                :planned
                                                                :actual)))))))))
                        ;; ;; add a :total-duration section underneath the bucket key, in ms
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;; ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                        ;;       (fn [periods] 
                        ;;         {:periods periods
                        ;;          :total-duration (->> periods 
                        ;;                               (map (fn [p] 
                        ;;                                      (let [start-ms (->> p :start (#(.valueOf %)))
                        ;;                                            stop-ms  (->> p :stop  (#(.valueOf %)))]
                        ;;                                        (- stop-ms start-ms))))
                        ;;                               (reduce +))})))
                        ;; ;; add a :total-duration section underneath the type key, in ms
                        ;; ;; this is adding up all the total durations from the previous step
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; ;;                 :planned {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS]
                        ;;       (fn [{:keys [actual planned]}]
                        ;;         {:planned (merge planned
                        ;;                          {:total-duration (->> planned
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})
                        ;;         :actual  (merge actual
                        ;;                          {:total-duration (->> actual
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})})))
                        ))
------ WARNING - :fn-arity -----------------------------------------------------
 Resource: :26:51
 Wrong number of args (1) passed to cljs.core/group-by
--------------------------------------------------------------------------------
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods [periods]}
                        ;;                              :planned {:periods [periods]}}
                        ;;                 bucket-id-b {:actual  {:periods [periods]}
                        ;;                              :planned {:periods [periods]}}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (->> periods
                                                       (group-by (fn [period] 
                                                                   (if (:planned periods)
                                                                     :planned
                                                                     :actual))))))))))
                        ;; ;; add a :total-duration section underneath the bucket key, in ms
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;; ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                        ;;       (fn [periods] 
                        ;;         {:periods periods
                        ;;          :total-duration (->> periods 
                        ;;                               (map (fn [p] 
                        ;;                                      (let [start-ms (->> p :start (#(.valueOf %)))
                        ;;                                            stop-ms  (->> p :stop  (#(.valueOf %)))]
                        ;;                                        (- stop-ms start-ms))))
                        ;;                               (reduce +))})))
                        ;; ;; add a :total-duration section underneath the type key, in ms
                        ;; ;; this is adding up all the total durations from the previous step
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; ;;                 :planned {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS]
                        ;;       (fn [{:keys [actual planned]}]
                        ;;         {:planned (merge planned
                        ;;                          {:total-duration (->> planned
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})
                        ;;         :actual  (merge actual
                        ;;                          {:total-duration (->> actual
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})})))
                        ))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (first wip)
[1581138000000 {#uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:actual [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T19:06:00.119-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:44:11.240-00:00", :label "", :id #uuid "c5e2033c-eeed-47bf-be7d-8c4be7febaf7", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T13:26:22.884-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T14:11:22.884-00:00", :label "", :id #uuid "6a394de1-e031-4c50-b510-64d4605a784f", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:44:23.643-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T21:45:10.827-00:00", :label "", :id #uuid "6b5e0b24-2223-425e-9394-642f8709ca71", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-02-08T21:45:15.320-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:22:42.420-00:00", :label "", :id #uuid "144ef831-6d82-45c8-8fd4-25c69f0711ad", :last-edited #inst "2020-02-08T18:53:18.603-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}]}, #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:actual [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T22:24:40.668-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:25:44.150-00:00", :label "", :id #uuid "ee21b67c-b2fd-4909-a3e0-98f6a6fb4ff6", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}} {:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2020-02-08T20:23:00.000-00:00", :created #inst "2020-02-08T18:53:18.603-00:00", :stop #inst "2020-02-08T22:24:01.222-00:00", :label "", :id #uuid "de5d348e-34dd-47f7-9d4b-7abc284a2cb2", :last-edited #inst "2020-02-08T22:24:30.290-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}]}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:actual [{:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2020-02-08T22:26:01.743-00:00", :created #inst "2020-02-08T22:26:01.743-00:00", :stop #inst "2020-02-08T22:28:13.951-00:00", :label "", :id #uuid "083bd923-cb53-4bd5-bdf6-c67d55c75c28", :last-edited #inst "2020-02-08T22:26:01.743-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}]}}]
time-align-mobile.handlers> (->> wip vec (rand-nth))
[1578027600000 {#uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a" {:actual [{:color "#8b8b8b", :planned false, :bucket-label "🤹‍♂️ misc", :start #inst "2020-01-03T22:10:42.738-00:00", :created #inst "2020-01-03T22:10:42.738-00:00", :stop #inst "2020-01-03T23:30:43.916-00:00", :label "Installing hue lights", :id #uuid "e7841c10-730e-4a98-a8fe-cd3e2c583168", :last-edited #inst "2020-01-03T22:10:50.834-00:00", :bucket-id #uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a", :data {}}]}, #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493" {:actual [{:color "#98ff11", :planned false, :bucket-label "🥘 food", :start #inst "2020-01-03T17:31:00.000-00:00", :created #inst "2020-01-03T17:48:29.058-00:00", :stop #inst "2020-01-03T17:45:00.000-00:00", :label "", :id #uuid "488e1758-5136-4de7-86ee-decfa5ec3c84", :last-edited #inst "2020-01-03T17:48:46.461-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}} {:color "#98ff11", :planned true, :bucket-label "🥘 food", :start #inst "2020-01-03T13:39:19.669-00:00", :created #inst "2020-02-08T18:29:00.113-00:00", :stop #inst "2020-01-03T14:24:19.669-00:00", :label "", :id #uuid "5a66929b-2128-42cf-a779-8f5f23c2993c", :last-edited #inst "2020-02-08T18:29:00.113-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}}]}, #uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:actual [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-01-03T13:29:20.854-00:00", :created #inst "2020-01-03T13:29:20.854-00:00", :stop #inst "2020-01-03T14:05:00.000-00:00", :label "Getting ready", :id #uuid "85f787e9-008f-46e6-af2c-59cc0372193f", :last-edited #inst "2020-01-03T16:04:00.230-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}]}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:actual [{:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2020-01-03T17:13:56.322-00:00", :created #inst "2020-01-03T17:13:56.322-00:00", :stop #inst "2020-01-03T17:30:00.000-00:00", :label "", :id #uuid "ebb20d27-8763-49ce-b038-3f1549fa1d2c", :last-edited #inst "2020-01-03T17:48:21.387-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}]}, #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832" {:actual [{:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2020-01-03T14:10:00.000-00:00", :created #inst "2020-01-03T16:04:03.967-00:00", :stop #inst "2020-01-03T17:05:00.000-00:00", :label "", :id #uuid "41bbb1a7-a49b-453e-aadb-588505b3b888", :last-edited #inst "2020-01-03T17:05:11.137-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}} {:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2020-01-03T18:23:51.386-00:00", :created #inst "2020-01-03T18:23:51.386-00:00", :stop #inst "2020-01-03T22:10:37.723-00:00", :label "", :id #uuid "6a63a5e1-8b84-48af-abfe-f4995e237910", :last-edited #inst "2020-01-03T18:23:51.386-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}}]}, #uuid "15b4326a-c90b-4fd1-94c1-285a7da9ee07" {:actual [{:color "#ffd611", :planned false, :bucket-label "👥 social", :start #inst "2020-01-04T00:43:53.549-00:00", :created #inst "2020-01-04T00:43:53.549-00:00", :stop #inst "2020-01-04T07:00:00.000-00:00", :label "Hanging out with Josh", :id #uuid "e0219273-cd15-47e0-ab9a-3e5a699e7998", :last-edited #inst "2020-01-04T08:26:29.384-00:00", :bucket-id #uuid "15b4326a-c90b-4fd1-94c1-285a7da9ee07", :data {}}]}}]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods [periods]}
                        ;;                              :planned {:periods [periods]}}
                        ;;                 bucket-id-b {:actual  {:periods [periods]}
                        ;;                              :planned {:periods [periods]}}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned periods)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; ;; add a :total-duration section underneath the bucket key, in ms
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;; ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                        ;;       (fn [periods] 
                        ;;         {:periods periods
                        ;;          :total-duration (->> periods 
                        ;;                               (map (fn [p] 
                        ;;                                      (let [start-ms (->> p :start (#(.valueOf %)))
                        ;;                                            stop-ms  (->> p :stop  (#(.valueOf %)))]
                        ;;                                        (- stop-ms start-ms))))
                        ;;                               (reduce +))})))
                        ;; ;; add a :total-duration section underneath the type key, in ms
                        ;; ;; this is adding up all the total durations from the previous step
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; ;;                 :planned {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS]
                        ;;       (fn [{:keys [actual planned]}]
                        ;;         {:planned (merge planned
                        ;;                          {:total-duration (->> planned
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})
                        ;;         :actual  (merge actual
                        ;;                          {:total-duration (->> actual
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})})))
                        ))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (->> wip vec rand-nth)
[1578027600000 {#uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a" {:planned [], :actual [{:color "#8b8b8b", :planned false, :bucket-label "🤹‍♂️ misc", :start #inst "2020-01-03T22:10:42.738-00:00", :created #inst "2020-01-03T22:10:42.738-00:00", :stop #inst "2020-01-03T23:30:43.916-00:00", :label "Installing hue lights", :id #uuid "e7841c10-730e-4a98-a8fe-cd3e2c583168", :last-edited #inst "2020-01-03T22:10:50.834-00:00", :bucket-id #uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a", :data {}}]}, #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493" {:planned [], :actual [{:color "#98ff11", :planned false, :bucket-label "🥘 food", :start #inst "2020-01-03T17:31:00.000-00:00", :created #inst "2020-01-03T17:48:29.058-00:00", :stop #inst "2020-01-03T17:45:00.000-00:00", :label "", :id #uuid "488e1758-5136-4de7-86ee-decfa5ec3c84", :last-edited #inst "2020-01-03T17:48:46.461-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}} {:color "#98ff11", :planned true, :bucket-label "🥘 food", :start #inst "2020-01-03T13:39:19.669-00:00", :created #inst "2020-02-08T18:29:00.113-00:00", :stop #inst "2020-01-03T14:24:19.669-00:00", :label "", :id #uuid "5a66929b-2128-42cf-a779-8f5f23c2993c", :last-edited #inst "2020-02-08T18:29:00.113-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}}]}, #uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:planned [], :actual [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2020-01-03T13:29:20.854-00:00", :created #inst "2020-01-03T13:29:20.854-00:00", :stop #inst "2020-01-03T14:05:00.000-00:00", :label "Getting ready", :id #uuid "85f787e9-008f-46e6-af2c-59cc0372193f", :last-edited #inst "2020-01-03T16:04:00.230-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}]}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:planned [], :actual [{:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2020-01-03T17:13:56.322-00:00", :created #inst "2020-01-03T17:13:56.322-00:00", :stop #inst "2020-01-03T17:30:00.000-00:00", :label "", :id #uuid "ebb20d27-8763-49ce-b038-3f1549fa1d2c", :last-edited #inst "2020-01-03T17:48:21.387-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}]}, #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832" {:planned [], :actual [{:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2020-01-03T14:10:00.000-00:00", :created #inst "2020-01-03T16:04:03.967-00:00", :stop #inst "2020-01-03T17:05:00.000-00:00", :label "", :id #uuid "41bbb1a7-a49b-453e-aadb-588505b3b888", :last-edited #inst "2020-01-03T17:05:11.137-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}} {:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2020-01-03T18:23:51.386-00:00", :created #inst "2020-01-03T18:23:51.386-00:00", :stop #inst "2020-01-03T22:10:37.723-00:00", :label "", :id #uuid "6a63a5e1-8b84-48af-abfe-f4995e237910", :last-edited #inst "2020-01-03T18:23:51.386-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}}]}, #uuid "15b4326a-c90b-4fd1-94c1-285a7da9ee07" {:planned [], :actual [{:color "#ffd611", :planned false, :bucket-label "👥 social", :start #inst "2020-01-04T00:43:53.549-00:00", :created #inst "2020-01-04T00:43:53.549-00:00", :stop #inst "2020-01-04T07:00:00.000-00:00", :label "Hanging out with Josh", :id #uuid "e0219273-cd15-47e0-ab9a-3e5a699e7998", :last-edited #inst "2020-01-04T08:26:29.384-00:00", :bucket-id #uuid "15b4326a-c90b-4fd1-94c1-285a7da9ee07", :data {}}]}}]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned periods)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; ;; add a :total-duration section underneath the bucket key, in ms
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}
                        ;; ;;                 :planned {bucket-id-a {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b {:periods [periods] :total-duration 132208}}}}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                        ;;       (fn [periods] 
                        ;;         {:periods periods
                        ;;          :total-duration (->> periods 
                        ;;                               (map (fn [p] 
                        ;;                                      (let [start-ms (->> p :start (#(.valueOf %)))
                        ;;                                            stop-ms  (->> p :stop  (#(.valueOf %)))]
                        ;;                                        (- stop-ms start-ms))))
                        ;;                               (reduce +))})))
                        ;; ;; add a :total-duration section underneath the type key, in ms
                        ;; ;; this is adding up all the total durations from the previous step
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; ;;                 :planned {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS]
                        ;;       (fn [{:keys [actual planned]}]
                        ;;         {:planned (merge planned
                        ;;                          {:total-duration (->> planned
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})
                        ;;         :actual  (merge actual
                        ;;                          {:total-duration (->> actual
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})})))
                        ))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (->> wip vec rand-nth)
[1577682000000 {#uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493" {:planned [], :actual [{:color "#98ff11", :planned false, :bucket-label "🥘 food", :start #inst "2019-12-30T16:56:08.303-00:00", :created #inst "2019-12-30T16:56:08.303-00:00", :stop #inst "2019-12-30T17:25:00.000-00:00", :label "", :id #uuid "164e5e0b-9122-4141-83cf-ee9c9026a9b6", :last-edited #inst "2019-12-30T17:43:02.991-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}}]}, #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:planned [], :actual [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2019-12-31T04:39:35.344-00:00", :created #inst "2019-12-31T04:39:35.344-00:00", :stop #inst "2019-12-31T13:36:34.182-00:00", :label "", :id #uuid "14b00ab9-1164-4015-9dc3-3441a2f0b359", :last-edited #inst "2019-12-31T04:39:35.344-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}} {:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2019-12-30T05:17:38.684-00:00", :created #inst "2019-12-30T05:17:38.684-00:00", :stop #inst "2019-12-30T14:18:39.468-00:00", :label "", :id #uuid "0af05237-a237-4b1d-8ca3-9eecbaed7f40", :last-edited #inst "2019-12-30T05:17:38.684-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}]}, #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832" {:planned [], :actual [{:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2019-12-30T18:15:28.877-00:00", :created #inst "2019-12-30T18:15:28.877-00:00", :stop #inst "2019-12-30T22:19:44.939-00:00", :label "", :id #uuid "b9318e4b-72b2-4a48-a08e-3f7c930e4748", :last-edited #inst "2019-12-30T18:15:28.877-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}} {:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2019-12-30T14:40:00.000-00:00", :created #inst "2019-12-30T16:56:12.287-00:00", :stop #inst "2019-12-30T16:55:00.000-00:00", :label "", :id #uuid "a3694957-9475-426d-9f27-0f3e675de280", :last-edited #inst "2019-12-30T16:56:24.538-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}}]}, #uuid "7dbb8f37-f79d-4121-91d2-bb70fd8eaece" {:planned [], :actual [{:color "#11a5ff", :planned false, :bucket-label "🌱 growth", :start #inst "2019-12-30T22:19:52.384-00:00", :created #inst "2019-12-30T22:19:52.384-00:00", :stop #inst "2019-12-30T22:27:46.009-00:00", :label "Writing in Gratitude journal", :id #uuid "f1aa2a9a-8087-417c-9534-94546833e71c", :last-edited #inst "2019-12-30T22:20:19.730-00:00", :bucket-id #uuid "7dbb8f37-f79d-4121-91d2-bb70fd8eaece", :data {}}]}}]
time-align-mobile.handlers> (select [sp/ALL] {:a "1" :b 2 :c 3})
[[:a "1"] [:b 2] [:c 3]]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned periods)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; total results:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/ALL]
                              (fn [[track periods]] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; ;; add a :total-duration section underneath the type key, in ms
                        ;; ;; this is adding up all the total durations from the previous step
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; ;;                 :planned {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS]
                        ;;       (fn [{:keys [actual planned]}]
                        ;;         {:planned (merge planned
                        ;;                          {:total-duration (->> planned
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})
                        ;;         :actual  (merge actual
                        ;;                          {:total-duration (->> actual
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})})))
                        ))
;; output cleared

time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned periods)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; total results:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; ;; add a :total-duration section underneath the type key, in ms
                        ;; ;; this is adding up all the total durations from the previous step
                        ;; ;; total results:
                        ;; ;; {1581138000000 {:actual  {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; ;;                 :planned {bucket-id-a    {:periods [periods] :total-duration 132208}
                        ;; ;;                           bucket-id-b    {:periods [periods] :total-duration 132208}
                        ;; ;;                           total-duration 264416}
                        ;; (->> (transform 
                        ;;       [sp/MAP-VALS]
                        ;;       (fn [{:keys [actual planned]}]
                        ;;         {:planned (merge planned
                        ;;                          {:total-duration (->> planned
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})
                        ;;         :actual  (merge actual
                        ;;                          {:total-duration (->> actual
                        ;;                                                (select [sp/MAP-VALS :total-duration])
                        ;;                                                (reduce +))})})))
                        ))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (->> wip vec rand-nth)
[1575090000000 {#uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493" {:planned {:periods [], :total-duration 0}, :actual {:periods [{:color "#98ff11", :planned false, :bucket-label "🥘 food", :start #inst "2019-11-30T23:09:41.011-00:00", :created #inst "2019-11-30T23:09:41.011-00:00", :stop #inst "2019-12-01T00:00:00.000-00:00", :label "", :id #uuid "561eb6bf-41e9-4f78-b201-e46f9cac6ac2", :last-edited #inst "2019-12-01T00:51:22.668-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}} {:color "#98ff11", :planned false, :bucket-label "🥘 food", :start #inst "2019-11-30T18:35:00.000-00:00", :created #inst "2019-11-30T19:10:57.426-00:00", :stop #inst "2019-11-30T19:00:00.000-00:00", :label "", :id #uuid "76eeeff9-0cbe-45eb-bf8f-9cd176aa4b4c", :last-edited #inst "2019-11-30T19:11:20.854-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}}], :total-duration 4518989}}, #uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:planned {:periods [], :total-duration 0}, :actual {:periods [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2019-11-30T15:10:10.032-00:00", :created #inst "2019-11-30T15:10:10.032-00:00", :stop #inst "2019-11-30T15:26:45.797-00:00", :label "Doing dishes", :id #uuid "bda07888-58f6-48a2-ad30-fea1abc09c01", :last-edited #inst "2019-11-30T15:10:16.052-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2019-11-30T19:11:29.778-00:00", :created #inst "2019-11-30T19:11:29.778-00:00", :stop #inst "2019-11-30T20:00:41.819-00:00", :label "Getting dressed", :id #uuid "b3ff8b5c-ba45-499b-9b01-766e921c4bb1", :last-edited #inst "2019-11-30T19:18:19.663-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}], :total-duration 3947806}}, #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:planned {:periods [], :total-duration 0}, :actual {:periods [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2019-11-30T06:08:08.410-00:00", :created #inst "2019-11-30T06:08:08.410-00:00", :stop #inst "2019-11-30T11:37:16.876-00:00", :label "", :id #uuid "abff01fa-19cf-4395-b3db-315e6229fe72", :last-edited #inst "2019-11-30T06:08:08.410-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}} {:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2019-11-30T11:55:00.000-00:00", :created #inst "2019-11-30T15:09:54.209-00:00", :stop #inst "2019-11-30T15:09:55.209-00:00", :label "", :id #uuid "5ada348e-f8f7-4b5b-9899-f229b87122a0", :last-edited #inst "2019-11-30T15:10:03.691-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}], :total-duration 31443675}}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:planned {:periods [], :total-duration 0}, :actual {:periods [{:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2019-11-30T20:00:51.080-00:00", :created #inst "2019-11-30T20:00:51.080-00:00", :stop #inst "2019-11-30T20:35:00.000-00:00", :label "Walking", :id #uuid "b7603550-43db-4fab-8d94-471b78dba0d8", :last-edited #inst "2019-11-30T20:47:01.982-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}], :total-duration 2048920}}, #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832" {:planned {:periods [], :total-duration 0}, :actual {:periods [{:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2019-11-30T20:55:00.000-00:00", :created #inst "2019-11-30T21:00:04.843-00:00", :stop #inst "2019-11-30T21:24:34.969-00:00", :label "", :id #uuid "5b8cb301-d9ab-4f15-987b-98063fee1b4c", :last-edited #inst "2019-11-30T21:00:10.102-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}} {:color "#dd0f1d", :planned false, :bucket-label "👨‍💼 career", :start #inst "2019-11-30T15:30:58.846-00:00", :created #inst "2019-11-30T15:30:58.846-00:00", :stop #inst "2019-11-30T18:33:10.766-00:00", :label "Doing some weekend work", :id #uuid "c36d2c65-e046-47a9-804a-3ab299511b1f", :last-edited #inst "2019-11-30T15:50:11.446-00:00", :bucket-id #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832", :data {}}], :total-duration 12706889}}, #uuid "a22654de-db53-4460-b4dc-0df1becd4061" {:planned {:periods [], :total-duration 0}, :actual {:periods [{:color "#ffac11", :planned false, :bucket-label "📱 leisure", :start #inst "2019-12-01T00:30:00.000-00:00", :created #inst "2019-12-01T00:51:28.331-00:00", :stop #inst "2019-12-01T02:19:27.052-00:00", :label "", :id #uuid "57b46fca-53e1-4c58-ae03-e77b706dea43", :last-edited #inst "2019-12-01T00:51:33.912-00:00", :bucket-id #uuid "a22654de-db53-4460-b4dc-0df1becd4061", :data {}} {:color "#ffac11", :planned false, :bucket-label "📱 leisure", :start #inst "2019-12-01T02:19:33.816-00:00", :created #inst "2019-12-01T02:19:33.816-00:00", :stop #inst "2019-12-01T03:48:27.448-00:00", :label "", :id #uuid "48afa27b-677e-4bb4-b4fe-d96696f17e9c", :last-edited #inst "2019-12-01T03:47:34.822-00:00", :bucket-id #uuid "a22654de-db53-4460-b4dc-0df1becd4061", :data {}} {:color "#ffac11", :planned false, :bucket-label "📱 leisure", :start #inst "2019-11-30T21:30:00.000-00:00", :created #inst "2019-11-30T22:19:29.593-00:00", :stop #inst "2019-11-30T22:20:50.930-00:00", :label "Watching YouTube", :id #uuid "c13179a2-2308-476c-987a-c74edb19b5a4", :last-edited #inst "2019-11-30T22:19:44.947-00:00", :bucket-id #uuid "a22654de-db53-4460-b4dc-0df1becd4061", :data {}} {:color "#ffac11", :planned false, :bucket-label "📱 leisure", :start #inst "2019-11-30T18:45:00.000-00:00", :created #inst "2019-11-30T19:10:07.596-00:00", :stop #inst "2019-11-30T19:10:32.631-00:00", :label "Watching YouTube", :id #uuid "6da8e625-de89-4c5f-b4df-402d231302bb", :last-edited #inst "2019-11-30T19:10:31.997-00:00", :bucket-id #uuid "a22654de-db53-4460-b4dc-0df1becd4061", :data {}}], :total-duration 16484245}}}]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned periods)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; add a :ratio section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; 0 would mean one of the tracks was empty
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                (let [planned-total (:total-duration planned)
                                      actual-total  (:total-duration actual)]
                                  {:actual  actual
                                   :planned planned
                                   :ratio   (if (or (= 0 planned-total)
                                                    (= 0 actual-total))
                                              0
                                              (/ actual planned))})))))
                        )
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (->> wip vec rand-nth)
[1575781200000 {#uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a" {:actual {:periods [{:color "#8b8b8b", :planned true, :bucket-label "🤹‍♂️ misc", :start #inst "2019-12-09T00:22:10.905-00:00", :created #inst "2019-12-08T16:39:55.188-00:00", :stop #inst "2019-12-09T01:07:10.905-00:00", :label "Setting up time to fulfill prescription", :id #uuid "4c9586a8-31bc-456c-bc02-36c20fbb787c", :last-edited #inst "2019-12-08T16:40:22.007-00:00", :bucket-id #uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a", :data {}}], :total-duration 2700000}, :planned {:periods [], :total-duration 0}, :ratio 0}, #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493" {:actual {:periods [{:color "#98ff11", :planned false, :bucket-label "🥘 food", :start #inst "2019-12-08T23:05:00.000-00:00", :created #inst "2019-12-08T16:39:30.222-00:00", :stop #inst "2019-12-09T01:30:24.843-00:00", :label "Making dinner and eating", :id #uuid "5047a35e-2339-4d0f-ab2a-5532e5a18be0", :last-edited #inst "2019-12-09T01:30:35.180-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}} {:color "#98ff11", :planned true, :bucket-label "🥘 food", :start #inst "2019-12-08T23:00:00.000-00:00", :created #inst "2019-12-08T16:39:30.222-00:00", :stop #inst "2019-12-08T23:45:00.000-00:00", :label "Making dinner", :id #uuid "78f3d34d-e602-42a3-a164-2f46a57a3fcf", :last-edited #inst "2019-12-08T16:39:38.698-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}} {:color "#98ff11", :planned false, :bucket-label "🥘 food", :start #inst "2019-12-08T22:51:04.739-00:00", :created #inst "2019-12-08T22:51:04.739-00:00", :stop #inst "2019-12-08T22:57:15.014-00:00", :label "Eating pre dinner", :id #uuid "3e3e8df7-4581-4f7b-868b-d76118607df3", :last-edited #inst "2019-12-08T22:51:13.009-00:00", :bucket-id #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493", :data {}}], :total-duration 11795118}, :planned {:periods [], :total-duration 0}, :ratio 0}, #uuid "7d886694-fc39-4a16-975d-a22e16a2a854" {:actual {:periods [{:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2019-12-08T22:25:45.390-00:00", :created #inst "2019-12-08T16:39:30.222-00:00", :stop #inst "2019-12-08T22:50:30.611-00:00", :label "Doing dishes", :id #uuid "3f689f43-71d2-40d6-a6b8-bc553c81d973", :last-edited #inst "2019-12-08T22:28:18.837-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}} {:color "#46e5ff", :planned false, :bucket-label "➰ maintenance", :start #inst "2019-12-08T22:57:19.743-00:00", :created #inst "2019-12-08T16:39:30.222-00:00", :stop #inst "2019-12-08T23:02:44.933-00:00", :label "Doing dishes", :id #uuid "8077c6f2-1f05-457a-8c4c-ff2f360a2db9", :last-edited #inst "2019-12-08T22:28:18.837-00:00", :bucket-id #uuid "7d886694-fc39-4a16-975d-a22e16a2a854", :data {}}], :total-duration 1810411}, :planned {:periods [], :total-duration 0}, :ratio 0}, #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:actual {:periods [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2019-12-09T04:13:58.507-00:00", :created #inst "2019-12-09T04:13:58.507-00:00", :stop #inst "2019-12-09T13:30:00.000-00:00", :label "", :id #uuid "d1e892b6-b50b-4a89-bb9d-78ae01588784", :last-edited #inst "2019-12-09T13:43:10.627-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}], :total-duration 33361493}, :planned {:periods [], :total-duration 0}, :ratio 0}, #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" {:actual {:periods [{:color "#60e563", :planned true, :bucket-label "🍎 health", :start #inst "2019-12-08T20:30:54.547-00:00", :created #inst "2019-12-08T16:38:13.833-00:00", :stop #inst "2019-12-08T22:00:00.000-00:00", :label "Walking lifting and posture workout", :id #uuid "0cfc5f3e-a272-49ca-b190-a5c9d65246e1", :last-edited #inst "2019-12-08T16:53:31.888-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}} {:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2019-12-08T21:30:00.000-00:00", :created #inst "2019-12-08T22:01:29.205-00:00", :stop #inst "2019-12-08T22:25:40.094-00:00", :label "Lifting", :id #uuid "4180cfb1-5dcd-4d26-ac52-8aa1497ee877", :last-edited #inst "2019-12-08T22:02:05.622-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}} {:color "#60e563", :planned false, :bucket-label "🍎 health", :start #inst "2019-12-08T20:43:50.855-00:00", :created #inst "2019-12-08T20:43:50.855-00:00", :stop #inst "2019-12-08T21:08:01.076-00:00", :label "Waking", :id #uuid "f7d92bb5-6bb4-4a55-9313-f0d256db259e", :last-edited #inst "2019-12-08T20:43:54.718-00:00", :bucket-id #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5", :data {}}], :total-duration 10135768}, :planned {:periods [], :total-duration 0}, :ratio 0}, #uuid "7dbb8f37-f79d-4121-91d2-bb70fd8eaece" {:actual {:periods [{:color "#11a5ff", :planned false, :bucket-label "🌱 growth", :start #inst "2019-12-08T16:53:36.363-00:00", :created #inst "2019-12-08T16:32:16.258-00:00", :stop #inst "2019-12-08T20:16:16.018-00:00", :label "Working on time sink", :id #uuid "67f92cf7-e104-4cd7-a850-23b8a824d160", :last-edited #inst "2019-12-08T16:38:01.578-00:00", :bucket-id #uuid "7dbb8f37-f79d-4121-91d2-bb70fd8eaece", :data {}} {:color "#11a5ff", :planned true, :bucket-label "🌱 growth", :start #inst "2019-12-08T16:50:00.000-00:00", :created #inst "2019-12-08T16:32:16.258-00:00", :stop #inst "2019-12-08T19:50:00.000-00:00", :label "Working on time sink", :id #uuid "bf742e7b-8cac-4b9d-b348-d00f1bdfae71", :last-edited #inst "2019-12-08T16:38:01.578-00:00", :bucket-id #uuid "7dbb8f37-f79d-4121-91d2-bb70fd8eaece", :data {}}], :total-duration 22959655}, :planned {:periods [], :total-duration 0}, :ratio 0}}]
time-align-mobile.handlers>                         ;; add a :ratio section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; 0 would mean one of the tracks was empty
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
(->> wip (select [sp/MAP-VALS sp/MAP-VALS :ratio]))
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned periods)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; add a :ratio section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; 0 would mean one of the tracks was empty
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                (let [planned-total (:total-duration planned)
                                      actual-total  (:total-duration actual)]
                                  {:actual  actual
                                   :planned planned
                                   :ratio   (if (= 0 planned-total)
                                              0
                                              (/ actual planned))}))))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers>                         ;; add a :ratio section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; 0 would mean one of the tracks was empty
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
(->> wip (select [sp/MAP-VALS sp/MAP-VALS :ratio]))
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
time-align-mobile.handlers>                         ;; add a :ratio section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; 0 would mean one of the tracks was empty
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
(->> wip (select [sp/MAP-VALS sp/MAP-VALS  sp/MAP-VALS :total-duration]))
[14485405 0 nil 7324704 0 nil 132208 0 nil 2700000 0 nil 2416318 0 nil 8500064 0 nil 1271965 0 nil 40366792 0 nil 6891798 0 nil 15867603 0 nil 883964 0 nil 9020530 0 nil 19435556 0 nil 7485823 0 nil 1646812 0 nil 82994875 0 nil 1200000 0 nil 17123178 0 nil 20286783 0 nil 4026894 0 nil 2341860 0 nil 3500750 0 nil 35798678 0 nil 6317155 0 nil 20475489 0 nil 6000000 0 nil 2873107 0 nil 1000 0 nil 7299628 0 nil 39435161 0 nil 26738455 0 nil 13629532 0 nil 2211500 0 nil 6040060 0 nil 4870379 0 nil 25138071 0 nil 33688059 0 nil 7003160 0 nil 900000 0 nil 8937725 0 nil 33468916 0 nil 2195966 0 nil 52800000 0 nil 7506860 0 nil 3906034 0 nil 3230372 0 nil 1048893 0 nil 35513381 0 nil 3099395 0 nil 24297321 0 nil 8399020 0 nil 4533142 0 nil 10387061 0 nil 2310267 0 nil 26389555 0 nil 5599995 0 nil 49617742 0 nil 2700000 0 nil 4801065 0 nil 5425087 0 nil 1336539 0 nil 85111 0 nil 48942650 0 nil 470189 0 nil 27087086 0 nil 5824429 0 nil 2753100 0 nil 3368860 0 nil 8358098 0 nil 10976108 0 nil 69114063 0 nil 7584243 0 nil 35011207 0 nil 564698 0 nil 10550588 0 nil 3658428 0 nil 35560618 0 nil 11819538 0 nil 9353119 0 nil 2864240 0 nil 66562394 0 nil 3274388 0 nil 3896384 0 nil 23205339 0 nil 4662063 0 nil 29359725 0 nil 3004467 0 nil 1736371 0 nil 50834711 0 nil 23682083 0 nil 2399279 0 nil 2899449 0 nil 14336517 0 nil 5376428 0 nil 2700000 0 nil 8804886 0 nil 9430433 0 nil 15469327 0 nil 26322562 0 nil 4518989 0 nil 3947806 0 nil 31443675 0 nil 2048920 0 nil 12706889 0 nil 16484245 0 nil 1684336 0 nil 6987783 0 nil 37990545 0 nil 13136698 0 nil 23739287 0 nil 17126238 0 nil 5100000 0 nil 6721872 0 nil 2853634 0 nil 39809577 0 nil 1559525 0 nil 16426018 0 nil 4037339 0 nil 5372636 0 nil 3991792 0 nil 26402225 0 nil 2742795 0 nil 19656541 0 nil 31585307 0 nil 1226248 0 nil 21060000 0 nil 3217651 0 nil 5472115 0 nil 34681064 0 nil 12486089 0 nil 50580000 0 nil 637749 0 nil 2053108 0 nil 6894033 0 nil 88097149 0 nil 7433672 0 nil 21498457 0 nil 11161956 0 nil 829704 0 nil 1028613 0 nil 5672058 0 nil 6328703 0 nil 30012960 0 nil 6703676 0 nil 41357302 0 nil 17322010 0 nil 8930782 0 nil 7032357 0 nil 4194324 0 nil 104471921 0 nil 1961320 0 nil 11069255 0 nil 804560 0 nil 3420000 0 nil 39120410 0 nil 1043975 0 nil 21660000 0 nil 12600000 0 nil 3245840 0 nil 2278318 0 nil 34206142 0 nil 2779914 0 nil 26368836 0 nil 6412001 0 nil 7548260 0 nil 3076940 0 nil 2760000 0 nil 32868454 0 nil 8684121 0 nil 33240000 0 nil 11100000 0 nil 1800000 0 nil 881220 0 nil 32591310 0 nil 2299397 0 nil 25325824 0 nil 11377141 0 nil 770354 0 nil 473651 0 nil 1391046 0 nil 4483901 0 nil 29340000 0 nil 5548529 0 nil 1732876 0 nil 2456516 0 nil 7295973 0 nil 9495245 0 nil 5314087 0 nil 2504832 0 nil 1912075 0 nil 23157324 0 nil 8127275 0 nil 2564495 0 nil 59727272 0 nil 413747 0 nil 27000000 0 nil 2700000 0 nil 6097736 0 nil 5255693 0 nil 65698061 0 nil 5136250 0 nil 9266966 0 nil 13838485 0 nil 3681736 0 nil 2995231 0 nil 65604162 0 nil 1367207 0 nil 976951 0 nil 26147666 0 nil 3327827 0 nil 2700000 0 nil 11795118 0 nil 1810411 0 nil 33361493 0 nil 10135768 0 nil 22959655 0 nil 2384248 0 nil 3475975 0 nil 32140678 0 nil 23509879 0 nil 5934115 0 nil 6454989 0 nil 4563284 0 nil 39519727 0 nil 2116931 0 nil 32982174 0 nil 4210657 0 nil 2663781 0 nil 6708449 0 nil 36309163 0 nil 4941441 0 nil 12241640 0 nil 3130847 0 nil 2737977 0 nil 6673038 0 nil 29475215 0 nil 2699773 0 nil 27533832 0 nil 7500583 0 nil 10516921 0 nil 2362323 0 nil 1884480 0 nil 11569450 0 nil 1454103 0 nil 1869620 0 nil 2628122 0 nil 35111805 0 nil 2232615 0 nil 3530268 0 nil 2963265 0 nil 13037484 0 nil 4273946 0 nil 5752815 0 nil 4468492 0 nil 8901288 0 nil 1862703 0 nil 8942530 0 nil 9180644 0 nil 3761179 0 nil 6866381 0 nil 11688194 0 nil 28963563 0 nil 23178637 0 nil 6582388 0 nil 3267538 0 nil 4978865 0 nil 30068192 0 nil 27711513 0 nil 6345772 0 nil 1361882 0 nil 569406 0 nil 1875023 0 nil 66817972 0 nil 4845243 0 nil 27540000 0 nil 6000000 0 nil 4140000 0 nil 12559385 0 nil 5257293 0 nil 59011022 0 nil 34755637 0 nil 960000 0 nil 7396482 0 nil 4065919 0 nil 1153234 0 nil 15541488 0 nil 4785119 0 nil 12922950 0 nil 6219835 0 nil 2400000 0 nil 10243054 0 nil 110652418 0 nil 2700000 0 nil 50371299 0 nil 10588327 0 nil 3943104 0 nil 2100000 0 nil 5269078 0 nil 29472484 0 nil 30209910 0 nil 4801178 0 nil 3540000 0 nil 2139146 0 nil 963678 0 nil 24106337 0 nil 22566451 0 nil 1763553 0 nil 6708501 0 nil 29228041 0 nil 1154626 0 nil 58971871 0 nil 13515930 0 nil 4817711 0 nil 10261574 0 nil 31320263 0 nil 1516791 0 nil 12281117 0 nil 1731697 0 nil 64679622 0 nil 22756062 0 nil 473625 0 nil 3359170 0 nil 3001979 0 nil 51855112 0 nil 5695798 0 nil 24145805 0 nil 51840000 0 nil 900000 0 nil 1500000 0 nil 65030030 0 nil 2270375 0 nil 23940564 0 nil 12900000 0 nil 1800000 0 nil 11079670 0 nil 56336160 0 nil 461135 0 nil 4500000 0 nil 11400000 0 nil 29921039 0 nil 1800000 0 nil 7800724 0 nil 2727605 0 nil 29605823 0 nil 4056222 0 nil 1710258 0 nil 21178945 0 nil 43547254 0 nil]
time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS  sp/MAP-VALS (sp/multi-path :planned :actual) :total-duration]))
;; output cleared

time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS  (sp/multi-path :planned :actual) :total-duration]))
[0 14485405 0 7324704 0 132208 0 2700000 0 2416318 0 8500064 0 1271965 0 40366792 0 6891798 0 15867603 0 883964 0 9020530 0 19435556 0 7485823 0 1646812 0 82994875 0 1200000 0 17123178 0 20286783 0 4026894 0 2341860 0 3500750 0 35798678 0 6317155 0 20475489 0 6000000 0 2873107 0 1000 0 7299628 0 39435161 0 26738455 0 13629532 0 2211500 0 6040060 0 4870379 0 25138071 0 33688059 0 7003160 0 900000 0 8937725 0 33468916 0 2195966 0 52800000 0 7506860 0 3906034 0 3230372 0 1048893 0 35513381 0 3099395 0 24297321 0 8399020 0 4533142 0 10387061 0 2310267 0 26389555 0 5599995 0 49617742 0 2700000 0 4801065 0 5425087 0 1336539 0 85111 0 48942650 0 470189 0 27087086 0 5824429 0 2753100 0 3368860 0 8358098 0 10976108 0 69114063 0 7584243 0 35011207 0 564698 0 10550588 0 3658428 0 35560618 0 11819538 0 9353119 0 2864240 0 66562394 0 3274388 0 3896384 0 23205339 0 4662063 0 29359725 0 3004467 0 1736371 0 50834711 0 23682083 0 2399279 0 2899449 0 14336517 0 5376428 0 2700000 0 8804886 0 9430433 0 15469327 0 26322562 0 4518989 0 3947806 0 31443675 0 2048920 0 12706889 0 16484245 0 1684336 0 6987783 0 37990545 0 13136698 0 23739287 0 17126238 0 5100000 0 6721872 0 2853634 0 39809577 0 1559525 0 16426018 0 4037339 0 5372636 0 3991792 0 26402225 0 2742795 0 19656541 0 31585307 0 1226248 0 21060000 0 3217651 0 5472115 0 34681064 0 12486089 0 50580000 0 637749 0 2053108 0 6894033 0 88097149 0 7433672 0 21498457 0 11161956 0 829704 0 1028613 0 5672058 0 6328703 0 30012960 0 6703676 0 41357302 0 17322010 0 8930782 0 7032357 0 4194324 0 104471921 0 1961320 0 11069255 0 804560 0 3420000 0 39120410 0 1043975 0 21660000 0 12600000 0 3245840 0 2278318 0 34206142 0 2779914 0 26368836 0 6412001 0 7548260 0 3076940 0 2760000 0 32868454 0 8684121 0 33240000 0 11100000 0 1800000 0 881220 0 32591310 0 2299397 0 25325824 0 11377141 0 770354 0 473651 0 1391046 0 4483901 0 29340000 0 5548529 0 1732876 0 2456516 0 7295973 0 9495245 0 5314087 0 2504832 0 1912075 0 23157324 0 8127275 0 2564495 0 59727272 0 413747 0 27000000 0 2700000 0 6097736 0 5255693 0 65698061 0 5136250 0 9266966 0 13838485 0 3681736 0 2995231 0 65604162 0 1367207 0 976951 0 26147666 0 3327827 0 2700000 0 11795118 0 1810411 0 33361493 0 10135768 0 22959655 0 2384248 0 3475975 0 32140678 0 23509879 0 5934115 0 6454989 0 4563284 0 39519727 0 2116931 0 32982174 0 4210657 0 2663781 0 6708449 0 36309163 0 4941441 0 12241640 0 3130847 0 2737977 0 6673038 0 29475215 0 2699773 0 27533832 0 7500583 0 10516921 0 2362323 0 1884480 0 11569450 0 1454103 0 1869620 0 2628122 0 35111805 0 2232615 0 3530268 0 2963265 0 13037484 0 4273946 0 5752815 0 4468492 0 8901288 0 1862703 0 8942530 0 9180644 0 3761179 0 6866381 0 11688194 0 28963563 0 23178637 0 6582388 0 3267538 0 4978865 0 30068192 0 27711513 0 6345772 0 1361882 0 569406 0 1875023 0 66817972 0 4845243 0 27540000 0 6000000 0 4140000 0 12559385 0 5257293 0 59011022 0 34755637 0 960000 0 7396482 0 4065919 0 1153234 0 15541488 0 4785119 0 12922950 0 6219835 0 2400000 0 10243054 0 110652418 0 2700000 0 50371299 0 10588327 0 3943104 0 2100000 0 5269078 0 29472484 0 30209910 0 4801178 0 3540000 0 2139146 0 963678 0 24106337 0 22566451 0 1763553 0 6708501 0 29228041 0 1154626 0 58971871 0 13515930 0 4817711 0 10261574 0 31320263 0 1516791 0 12281117 0 1731697 0 64679622 0 22756062 0 473625 0 3359170 0 3001979 0 51855112 0 5695798 0 24145805 0 51840000 0 900000 0 1500000 0 65030030 0 2270375 0 23940564 0 12900000 0 1800000 0 11079670 0 56336160 0 461135 0 4500000 0 11400000 0 29921039 0 1800000 0 7800724 0 2727605 0 29605823 0 4056222 0 1710258 0 21178945 0 43547254]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned period)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; add a :ratio section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; 0 would mean one of the tracks was empty
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                (let [planned-total (:total-duration planned)
                                      actual-total  (:total-duration actual)]
                                  {:actual  actual
                                   :planned planned
                                   :ratio   (if (= 0 planned-total)
                                              0
                                              (/ actual planned))}))))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (->> wip vec rand-nth)
[1577509200000 {#uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" {:actual {:periods [{:color "#9711ff", :planned false, :bucket-label "🛌 sleep", :start #inst "2019-12-28T07:18:41.363-00:00", :created #inst "2019-12-28T07:18:41.363-00:00", :stop #inst "2019-12-28T13:45:00.000-00:00", :label "", :id #uuid "0e857078-419b-47b3-bedd-12318e533d06", :last-edited #inst "2019-12-29T00:01:14.564-00:00", :bucket-id #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d", :data {}}], :total-duration 23178637}, :planned {:periods [], :total-duration 0}, :ratio 0}}]
time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS  (sp/multi-path :planned :actual) :total-duration]))
;; output cleared

time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS  (sp/multi-path :planned ) :total-duration]))
[0 0 0 2700000 0 0 0 0 2700000 0 0 0 12600000 6300000 0 25200000 1200000 0 14400000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2700000 0 0 0 1800000 900000 4500000 0 1800000 28500000 4500000 0 0 0 0 0 0 0 0 4476356 900000 0 1500000 28800000 0 0 0 0 0 0 0 0 0 0 0 3300000 9300000 30000000 4500000 21600000 0 7200000 0 0 0 0 0 32400000 0 0 0 0 0 0 0 0 0 0 0 0 1500000 2700000 0 5340000 0 9900000 0 0 0 0 0 0 900000 4200000 0 8340000 6300000 4320000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1800000 1500000 0 3000000 27000000 0 1200000 3000000 32400000 3600000 0 3300000 0 0 0 0 0 3000000 18000000 0 0 0 0 36000000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1500000 1800000 0 3600000 12600000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2727275 1200000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2700000 2700000 0 0 5345453 10800000 0 0 0 0 0 0 0 0 0 0 2700000 600000 3900000 0 4500000 5400000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6971154 5400000 1500000 5400000 8100000 0 0 2100000 0 2100000 0 14400000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3540000 0 6981810 43200000 2700000 21300000 0 3943104 0 0 0 0 0 2700000 0 0 0 0 0 3960000 0 600000 30000000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1800000 4500000 34200000 0 4500000 4500000 6000000 0 0 0 0 0 0 0 0]
time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS  (sp/multi-path :actual ) :total-duration]))
[14485405 7324704 132208 0 2416318 8500064 1271965 40366792 4191798 15867603 883964 9020530 6835556 1185823 1646812 57794875 0 17123178 5886783 4026894 2341860 3500750 35798678 6317155 20475489 6000000 2873107 1000 7299628 39435161 26738455 13629532 2211500 3340060 4870379 25138071 33688059 5203160 0 4437725 33468916 395966 24300000 3006860 3906034 3230372 1048893 35513381 3099395 24297321 8399020 4533142 5910705 1410267 26389555 4099995 20817742 2700000 4801065 5425087 1336539 85111 48942650 470189 27087086 5824429 2753100 3368860 5058098 1676108 39114063 3084243 13411207 564698 3350588 3658428 35560618 11819538 9353119 2864240 34162394 3274388 3896384 23205339 4662063 29359725 3004467 1736371 50834711 23682083 2399279 2899449 14336517 3876428 0 8804886 4090433 15469327 16422562 4518989 3947806 31443675 2048920 12706889 16484245 784336 2787783 37990545 4796698 17439287 12806238 5100000 6721872 2853634 39809577 1559525 16426018 4037339 5372636 3991792 26402225 2742795 19656541 31585307 1226248 21060000 1417651 3972115 34681064 9486089 23580000 637749 853108 3894033 55697149 3833672 21498457 7861956 829704 1028613 5672058 6328703 30012960 3703676 23357302 17322010 8930782 7032357 4194324 68471921 1961320 11069255 804560 3420000 39120410 1043975 21660000 12600000 3245840 2278318 34206142 2779914 26368836 6412001 7548260 1576940 960000 32868454 5084121 20640000 11100000 1800000 881220 32591310 2299397 25325824 11377141 770354 473651 1391046 4483901 29340000 5548529 1732876 2456516 7295973 9495245 5314087 2504832 1912075 23157324 5400000 1364495 59727272 413747 27000000 2700000 6097736 5255693 65698061 5136250 9266966 13838485 3681736 2995231 65604162 1367207 976951 26147666 3327827 0 9095118 1810411 33361493 4790315 12159655 2384248 3475975 32140678 23509879 5934115 6454989 4563284 39519727 2116931 32982174 1510657 2063781 2808449 36309163 441441 6841640 3130847 2737977 6673038 29475215 2699773 27533832 7500583 10516921 2362323 1884480 11569450 1454103 1869620 2628122 35111805 2232615 3530268 2963265 13037484 4273946 5752815 4468492 8901288 1862703 1971376 3780644 2261179 1466381 3588194 28963563 23178637 4482388 3267538 2878865 30068192 13311513 6345772 1361882 569406 1875023 66817972 4845243 27540000 6000000 4140000 12559385 5257293 59011022 34755637 960000 7396482 4065919 1153234 15541488 4785119 12922950 2679835 2400000 3261244 67452418 0 29071299 10588327 0 2100000 5269078 29472484 30209910 4801178 840000 2139146 963678 24106337 22566451 1763553 2748501 29228041 554626 28971871 13515930 4817711 10261574 31320263 1516791 12281117 1731697 64679622 22756062 473625 3359170 3001979 51855112 5695798 24145805 51840000 900000 1500000 65030030 2270375 23940564 12900000 0 6579670 22136160 461135 0 6900000 23921039 1800000 7800724 2727605 29605823 4056222 1710258 21178945 43547254]
time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS :ratio]))
[0 0 0 ##NaN 0 0 0 0 ##NaN 0 0 0 ##NaN ##NaN 0 ##NaN ##NaN 0 ##NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ##NaN 0 0 0 ##NaN ##NaN ##NaN 0 ##NaN ##NaN ##NaN 0 0 0 0 0 0 0 0 ##NaN ##NaN 0 ##NaN ##NaN 0 0 0 0 0 0 0 0 0 0 0 ##NaN ##NaN ##NaN ##NaN ##NaN 0 ##NaN 0 0 0 0 0 ##NaN 0 0 0 0 0 0 0 0 0 0 0 0 ##NaN ##NaN 0 ##NaN 0 ##NaN 0 0 0 0 0 0 ##NaN ##NaN 0 ##NaN ##NaN ##NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ##NaN ##NaN 0 ##NaN ##NaN 0 ##NaN ##NaN ##NaN ##NaN 0 ##NaN 0 0 0 0 0 ##NaN ##NaN 0 0 0 0 ##NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ##NaN ##NaN 0 ##NaN ##NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ##NaN ##NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ##NaN ##NaN 0 0 ##NaN ##NaN 0 0 0 0 0 0 0 0 0 0 ##NaN ##NaN ##NaN 0 ##NaN ##NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ##NaN ##NaN ##NaN ##NaN ##NaN 0 0 ##NaN 0 ##NaN 0 ##NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ##NaN 0 ##NaN ##NaN ##NaN ##NaN 0 ##NaN 0 0 0 0 0 ##NaN 0 0 0 0 0 ##NaN 0 ##NaN ##NaN 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ##NaN ##NaN ##NaN 0 ##NaN ##NaN ##NaN 0 0 0 0 0 0 0 0]
time-align-mobile.handlers> (/ 132208 2700000)
0.04896592592592593
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned period)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; add a :ratio section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; 0 would mean one of the tracks was empty
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                (let [planned-total (:total-duration planned)
                                      actual-total  (:total-duration actual)]
                                  {:actual  actual
                                   :planned planned
                                   :ratio   (if (= 0 planned-total)
                                              0
                                              (/ actual-total planned-total))}))))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS :ratio]))
[0 0 0 0 0 0 0 0 1.5525177777777779 0 0 0 0.5425044444444445 0.188225873015873 0 2.2934474206349207 0 0 0.408804375 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1.2370592592592593 0 0 0 2.8906444444444443 0 0.9861611111111112 0 0.2199811111111111 0.8526315789473684 0.6681911111111111 0 0 0 0 0 0 0 0 1.3204278212009948 1.5669633333333333 0 2.73333 0.7228382638888889 0 0 0 0 0 0 0 0 0 0 0 1.5327569696969696 0.18022666666666667 1.3038021 0.6853873333333333 0.620889212962963 0 0.46535944444444444 0 0 0 0 0 1.0543948765432098 0 0 0 0 0 0 0 0 0 0 0 0 2.5842853333333333 0 0 0.7659986891385768 0 1.6588446464646465 0 0 0 0 0 0 0.8714844444444444 0.6637578571428572 0 0.5751436450839329 2.768140793650794 2.9644069444444443 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.7875838888888889 2.648076666666667 0 3.1620296666666667 0.8733333333333333 0 0.7109233333333334 1.298011 1.7190478086419754 1.064908888888889 0 2.382410909090909 0 0 0 0 0 1.2345586666666666 1.2976278888888888 0 0 0 0 1.9019978055555555 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1.0512933333333334 0.5333333333333333 0 1.4122558333333333 1.638095238095238 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1.979998350001375 1.1370791666666666 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3.3685622222222222 0 0 0.8961476230358774 1.1258939814814815 0 0 0 0 0 0 0 0 0 0 0.5595025925925926 3.439635 0.7201151282051282 0 0.098098 1.2669703703703703 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.28279048203496865 0.7001192592592592 1.5074526666666668 0.27155203703703706 0.4429869135802469 0 0 2.1344704761904763 0 1.3708880952380953 0 0.924410625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.7570155367231638 0 0.4671058078062852 1.5613985648148148 0 1.3648497183098591 0 0 0 0 0 0 0 0.3111111111111111 0 0 0 0 0 0.694065909090909 0 0.9243766666666666 0.9657290333333334 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1.462148888888889 0.6472561403508772 0 0 1.5333333333333334 3.9868398333333332 0 0 0 0 0 0 0 0]
time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS :ratio]) (remove #(= 0 %)))
(1.5525177777777779 0.5425044444444445 0.188225873015873 2.2934474206349207 0.408804375 1.2370592592592593 2.8906444444444443 0.9861611111111112 0.2199811111111111 0.8526315789473684 0.6681911111111111 1.3204278212009948 1.5669633333333333 2.73333 0.7228382638888889 1.5327569696969696 0.18022666666666667 1.3038021 0.6853873333333333 0.620889212962963 0.46535944444444444 1.0543948765432098 2.5842853333333333 0.7659986891385768 1.6588446464646465 0.8714844444444444 0.6637578571428572 0.5751436450839329 2.768140793650794 2.9644069444444443 0.7875838888888889 2.648076666666667 3.1620296666666667 0.8733333333333333 0.7109233333333334 1.298011 1.7190478086419754 1.064908888888889 2.382410909090909 1.2345586666666666 1.2976278888888888 1.9019978055555555 1.0512933333333334 0.5333333333333333 1.4122558333333333 1.638095238095238 1.979998350001375 1.1370791666666666 3.3685622222222222 0.8961476230358774 1.1258939814814815 0.5595025925925926 3.439635 0.7201151282051282 0.098098 1.2669703703703703 0.28279048203496865 0.7001192592592592 1.5074526666666668 0.27155203703703706 0.4429869135802469 2.1344704761904763 1.3708880952380953 0.924410625 0.7570155367231638 0.4671058078062852 1.5613985648148148 1.3648497183098591 0.3111111111111111 0.694065909090909 0.9243766666666666 0.9657290333333334 1.462148888888889 0.6472561403508772 1.5333333333333334 3.9868398333333332)
time-align-mobile.handlers> (js/Math.abs -1)
1
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned period)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; add a :score section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                (let [planned-total (:total-duration planned)
                                      actual-total  (:total-duration actual)]
                                  {:actual  actual
                                   :planned planned
                                   :score   (->> actual-total
                                                 (- planned-total)
                                                 (js/Math.abs)
                                                 (-> (/ planned-total))
                                                 (- 1)
                                                 )}))))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS :score]))
[##-Inf ##-Inf ##-Inf 0.9999996296296296 ##-Inf ##-Inf ##-Inf ##-Inf 0.9999996296296296 ##-Inf ##-Inf ##-Inf 0.9999999206349206 0.9999998412698413 ##-Inf 0.9999999603174603 0.9999991666666667 ##-Inf 0.9999999305555556 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999996296296296 ##-Inf ##-Inf ##-Inf 0.9999994444444444 0.9999988888888889 0.9999997777777778 ##-Inf 0.9999994444444444 0.9999999649122807 0.9999997777777778 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999997766040056 0.9999988888888889 ##-Inf 0.9999993333333334 0.9999999652777778 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999996969696969 0.9999998924731183 0.9999999666666667 0.9999997777777778 0.9999999537037038 ##-Inf 0.9999998611111112 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999999691358025 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999993333333334 0.9999996296296296 ##-Inf 0.9999998127340824 ##-Inf 0.9999998989898989 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999988888888889 0.9999997619047619 ##-Inf 0.9999998800959232 0.9999998412698413 0.9999997685185186 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999994444444444 0.9999993333333334 ##-Inf 0.9999996666666666 0.999999962962963 ##-Inf 0.9999991666666667 0.9999996666666666 0.9999999691358025 0.9999997222222222 ##-Inf 0.9999996969696969 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999996666666666 0.9999999444444444 ##-Inf ##-Inf ##-Inf ##-Inf 0.9999999722222223 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999993333333334 0.9999994444444444 ##-Inf 0.9999997222222222 0.9999999206349206 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999996333336388 0.9999991666666667 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999996296296296 0.9999996296296296 ##-Inf ##-Inf 0.999999812925116 0.9999999074074074 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999996296296296 0.9999983333333333 0.9999997435897436 ##-Inf 0.9999997777777778 0.9999998148148148 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999998565517273 0.9999998148148148 0.9999993333333334 0.9999998148148148 0.9999998765432099 ##-Inf ##-Inf 0.9999995238095238 ##-Inf 0.9999995238095238 ##-Inf 0.9999999305555556 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999997175141243 ##-Inf 0.9999998567706655 0.9999999768518518 0.9999996296296296 0.9999999530516432 ##-Inf 0.9999997463926896 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999996296296296 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999997474747475 ##-Inf 0.9999983333333333 0.9999999666666667 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf 0.9999994444444444 0.9999997777777778 0.999999970760234 ##-Inf 0.9999997777777778 0.9999997777777778 0.9999998333333333 ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf ##-Inf]
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned period)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; add a :score section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                (let [planned-total (:total-duration planned)
                                      actual-total  (:total-duration actual)]
                                  {:actual  actual
                                   :planned planned
                                   :score   (if (= 0 planned-total))(->> actual-total
                                                 (- planned-total)
                                                 (js/Math.abs)
                                                 (-> (/ planned-total))
                                                 (- 1)
                                                 )}))))))
Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 77, col 52] The map literal starting with :actual on line 70 column 35 contains 7 form(s). Map literals must contain an even number of forms. {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 77, :col 52}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}Failed to read input: clojure.lang.ExceptionInfo: repl-input.cljs [line 1, col 2] Unmatched delimiter ). {:type :reader-exception, :ex-kind :reader-error, :file "repl-input.cljs", :line 1, :col 2}
time-align-mobile.handlers> (def wip (-> db
                        (subs/get-periods :na)
                        ;; group by the beginning of the day for each :start value as a unix time stamp
                        ;; {1581138000000 [periods]}
                        (->> (group-by
                              (fn [{:keys [start]}]
                                (if (some? start)
                                  (->> start
                                       (helpers/reset-relative-ms 0)
                                       (#(.valueOf %)))
                                  :not-on-a-day-a-day))))
                        ;; take all the periods under the day key
                        ;; and group them by bucket-id and then by track
                        ;; the total result:
                        ;; {1581138000000 {bucket-id-a {:actual  [periods]
                        ;;                              :planned [periods]}
                        ;;                 bucket-id-b {:actual  [periods]
                        ;;                              :planned [periods]}}}
                        (->> (transform 
                              [sp/MAP-VALS] 
                              (fn [periods] 
                                (->> periods
                                     (group-by :bucket-id)
                                     (transform [sp/MAP-VALS]
                                                (fn [periods]
                                                  (merge {:planned [] :actual []}
                                                         (->> periods
                                                              (group-by (fn [period] 
                                                                          (if (:planned period)
                                                                            :planned
                                                                            :actual)))))))))))
                        ;; add a :total-duration section underneath the type key, in ms
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS sp/MAP-VALS]
                              (fn [periods] 
                                {:periods periods
                                 :total-duration (->> periods 
                                                      (map (fn [p] 
                                                             (let [start-ms (->> p :start (#(.valueOf %)))
                                                                   stop-ms  (->> p :stop  (#(.valueOf %)))]
                                                               (- stop-ms start-ms))))
                                                      (reduce +))})))
                        ;; add a :score section undernath each bucket-id key
                        ;; 1 is a perfect score
                        ;; total result:
                        ;; {1581138000000 {bucket-id-a {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        ;;                 bucket-id-b {:actual  {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :planned {:periods        [periods]
                        ;;                                        :total-duration 132208}
                        ;;                              :ratio    1}
                        (->> (transform 
                              [sp/MAP-VALS sp/MAP-VALS]
                              (fn [{:keys [actual planned]}]
                                (let [planned-total (:total-duration planned)
                                      actual-total  (:total-duration actual)]
                                  {:actual  actual
                                   :planned planned
                                   :score   (if (= 0 planned-total)
                                              0 
                                              (->> actual-total
                                                   (- planned-total)
                                                   (js/Math.abs)
                                                   (-> (/ planned-total))
                                                   (- 1)))}))))))
#'time-align-mobile.handlers/wip
time-align-mobile.handlers> (->> wip (select [sp/MAP-VALS sp/MAP-VALS :score]))
[0 0 0 0.9999996296296296 0 0 0 0 0.9999996296296296 0 0 0 0.9999999206349206 0.9999998412698413 0 0.9999999603174603 0.9999991666666667 0 0.9999999305555556 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9999996296296296 0 0 0 0.9999994444444444 0.9999988888888889 0.9999997777777778 0 0.9999994444444444 0.9999999649122807 0.9999997777777778 0 0 0 0 0 0 0 0 0.9999997766040056 0.9999988888888889 0 0.9999993333333334 0.9999999652777778 0 0 0 0 0 0 0 0 0 0 0 0.9999996969696969 0.9999998924731183 0.9999999666666667 0.9999997777777778 0.9999999537037038 0 0.9999998611111112 0 0 0 0 0 0.9999999691358025 0 0 0 0 0 0 0 0 0 0 0 0 0.9999993333333334 0.9999996296296296 0 0.9999998127340824 0 0.9999998989898989 0 0 0 0 0 0 0.9999988888888889 0.9999997619047619 0 0.9999998800959232 0.9999998412698413 0.9999997685185186 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9999994444444444 0.9999993333333334 0 0.9999996666666666 0.999999962962963 0 0.9999991666666667 0.9999996666666666 0.9999999691358025 0.9999997222222222 0 0.9999996969696969 0 0 0 0 0 0.9999996666666666 0.9999999444444444 0 0 0 0 0.9999999722222223 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9999993333333334 0.9999994444444444 0 0.9999997222222222 0.9999999206349206 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9999996333336388 0.9999991666666667 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9999996296296296 0.9999996296296296 0 0 0.999999812925116 0.9999999074074074 0 0 0 0 0 0 0 0 0 0 0.9999996296296296 0.9999983333333333 0.9999997435897436 0 0.9999997777777778 0.9999998148148148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9999998565517273 0.9999998148148148 0.9999993333333334 0.9999998148148148 0.9999998765432099 0 0 0.9999995238095238 0 0.9999995238095238 0 0.9999999305555556 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9999997175141243 0 0.9999998567706655 0.9999999768518518 0.9999996296296296 0.9999999530516432 0 0.9999997463926896 0 0 0 0 0 0.9999996296296296 0 0 0 0 0 0.9999997474747475 0 0.9999983333333333 0.9999999666666667 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9999994444444444 0.9999997777777778 0.999999970760234 0 0.9999997777777778 0.9999997777777778 0.9999998333333333 0 0 0 0 0 0 0 0]
time-align-mobile.handlers> 