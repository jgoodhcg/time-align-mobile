;; Connected to nREPL server - nrepl://localhost:8202
;; CIDER 0.24.0snapshot (package: 20191129.901), nREPL 0.6.0
;; Clojure 1.10.1, Java 11.0.5-ea
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
;; ======================================================================
;; If you’re new to CIDER it is highly recommended to go through its
;; manual first. Type <M-x cider-view-manual> to view it.
;; In case you’re seeing any warnings you should consult the manual’s
;; "Troubleshooting" section.
;;
;; Here are few tips to get you started:
;;
;; * Press <C-h m> to see a list of the keybindings available (this
;;   will work in every Emacs buffer)
;; * Press <, ,> to quickly invoke some REPL command
;; * Press <, s s> to switch between the REPL and a Clojure file
;; * Press <M-x cider-find-var> to jump to the source of something (e.g. a var, a
;;   Java method)
;; * Press <, h h> to view the documentation for something (e.g.
;;   a var, a Java method)
;; * Enable ‘eldoc-mode’ to display function & method signatures in the minibuffer.
;; * Print CIDER’s refcard and keep it close to your keyboard.
;;
;; CIDER is super customizable - try <M-x customize-group cider> to
;; get a feel for this. If you’re thirsty for knowledge you should try
;; <M-x cider-drink-a-sip>.
;;
;; If you think you’ve encountered a bug (or have some suggestions for
;; improvements) use <M-x cider-report-bug> to report it.
;;
;; Above all else - don’t panic! In case of an emergency - procure
;; some (hard) cider and enjoy it responsibly!
;;
;; You can remove this message with the <M-x cider-repl-clear-help-banner> command.
;; You can disable it from appearing on start by setting
;; ‘cider-repl-display-help-banner’ to nil.
;; ======================================================================
;; Please, consider taking part in the State of CIDER survey
;; https://forms.gle/Cp6DW2zGUQkh42u38
;; Your feedback means a lot to us!
;; ======================================================================
;;  Startup: /usr/bin/npx shadow-cljs -d nrepl:0.6.0 -d cider/piggieback:0.4.2 -d cider/cider-nrepl:0.23.0-SNAPSHOT server
;;
;; ClojureScript REPL type: shadow
;; ClojureScript REPL init form: (do (require '[shadow.cljs.devtools.api :as shadow]) (shadow/watch :app) (shadow/nrepl-select :app))
;;
[:app] Configuring build.
[:app] Compiling ...
[:app] Build failure:
------ ERROR -------------------------------------------------------------------
 File: /home/justin/projects/time-align-mobile/src/main/time_align_mobile/subs.cljs:535:3
--------------------------------------------------------------------------------
 532 |   (get-in db [:selection :report :bucket-contribution]))
 533 | 
 534 | (defn get-contribution-three-month [db _]
 535 |   (let [selected-bucket-id ]))
---------^----------------------------------------------------------------------
Syntax error macroexpanding cljs.core/let.
Call to cljs.core/let did not conform to spec.
-- Spec failed --------------------

  ([selected-bucket-id])
   ^^^^^^^^^^^^^^^^^^^^

should satisfy

  even-number-of-forms?

-- Relevant specs -------

:shadow.cljs.devtools.cljs-specs/bindings:
  (clojure.spec.alpha/and
   clojure.core/vector?
   shadow.cljs.devtools.cljs-specs/even-number-of-forms?
   (clojure.spec.alpha/* :shadow.cljs.devtools.cljs-specs/binding))

-------------------------
Detected 1 error

--------------------------------------------------------------------------------
 536 | 
 537 | (reg-sub :get-navigation get-navigation)
 538 | (reg-sub :get-bucket-form get-bucket-form)
 539 | (reg-sub :get-bucket-form-changes get-bucket-form-changes)
--------------------------------------------------------------------------------

To quit, type: :cljs/quit
[:selected :app][:app] Compiling ...
[:app] Build completed. (216 files, 3 compiled, 0 warnings, 2.00s)

shadow.user> 
cljs.user> (+ 1 1)
2
cljs.user> (ns time-align-mobile.subs)
niltime-align-mobile.substime-align-mobile.subs
time-align-mobile.subs> (def app-db @re-frame.db/app-db)
#'time-align-mobile.subs/app-db
time-align-mobile.subs> (get-periods app-db :no-op)
;; output cleared

time-align-mobile.subs> (def periods (get-periods app-db :no-op))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :1:15
 Use of undeclared Var time-align-mobile.subs/get-periods
--------------------------------------------------------------------------------
#'time-align-mobile.subs/periods
time-align-mobile.subs> (count periods)
299
time-align-mobile.subs> (first periods)
{:color "#8b8b8b", :planned false, :bucket-label "🤹‍♂️ misc", :start #inst "2019-12-10T11:50:00.000-00:00", :created #inst "2019-12-11T02:17:47.110-00:00", :stop #inst "2019-12-10T13:28:54.115-00:00", :label "Going to the dentist", :id #uuid "0f93c7ac-27f9-46c5-a6d1-0729368a5030", :last-edited #inst "2019-12-11T02:17:47.110-00:00", :bucket-id #uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a", :data {}}
time-align-mobile.subs> (last periods)
{:color "#ffac11", :planned false, :bucket-label "📱 leisure", :start #inst "2019-11-24T22:53:47.090-00:00", :created #inst "2019-11-24T22:53:47.090-00:00", :stop #inst "2019-11-25T02:44:25.575-00:00", :label "Playing civ", :id #uuid "d69cabf0-a0ce-45d1-a4bf-97b049689296", :last-edited #inst "2019-11-24T22:53:53.679-00:00", :bucket-id #uuid "a22654de-db53-4460-b4dc-0df1becd4061", :data {}}
time-align-mobile.subs>        (->> 7
             range
             (take 7)
             (map #(helpers/back-n-days (js/Date.) %))
             (reduce #(assoc %1 %2 {}) {})
)
{#inst "2019-12-14T05:00:00.000-00:00" {}, #inst "2019-12-13T05:00:00.000-00:00" {}, #inst "2019-12-12T05:00:00.000-00:00" {}, #inst "2019-12-11T05:00:00.000-00:00" {}, #inst "2019-12-10T05:00:00.000-00:00" {}, #inst "2019-12-09T05:00:00.000-00:00" {}, #inst "2019-12-08T05:00:00.000-00:00" {}}
time-align-mobile.subs>        (->> 7
             range
             (take 7)
             (map #(helpers/back-n-days (js/Date.) %)))
(#inst "2019-12-14T05:00:00.000-00:00" #inst "2019-12-13T05:00:00.000-00:00" #inst "2019-12-12T05:00:00.000-00:00" #inst "2019-12-11T05:00:00.000-00:00" #inst "2019-12-10T05:00:00.000-00:00" #inst "2019-12-09T05:00:00.000-00:00" #inst "2019-12-08T05:00:00.000-00:00")
time-align-mobile.subs> (keys (partition-by :bucket-id periods))
time-align-mobile.subs> (:bucket-id (first periods))
#uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a"
time-align-mobile.subs> (partition-by :bucket-id periods)
;; output cleared

time-align-mobile.subs> (keys {:a "b"})
(:a)
time-align-mobile.subs> (type {})
cljs.core/PersistentArrayMap
time-align-mobile.subs> (type (partition-by :bucket-id periods))
cljs.core/LazySeq
time-align-mobile.subs> (->> periods 
                             (partition-by :bucket-id)
                             keys)

                        
time-align-mobile.subs> (doall (->> periods 
                                    (partition-by :bucket-id)
                                    keys))

                        
time-align-mobile.subs> (comment "oh it's a lazy SEQUENCE not a map")
nil
time-align-mobile.subs> (->> periods 
                                    (group-by :bucket-id)
                                    keys)
(#uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a" #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493" #uuid "7d886694-fc39-4a16-975d-a22e16a2a854" #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832" #uuid "15b4326a-c90b-4fd1-94c1-285a7da9ee07" #uuid "7dbb8f37-f79d-4121-91d2-bb70fd8eaece" #uuid "46ea89b4-5dc6-46c6-b715-41513519299f" #uuid "a22654de-db53-4460-b4dc-0df1becd4061")
time-align-mobile.subs> (comment "or we could just use the buckets ...")
nil
time-align-mobile.subs> (count {:a "a" :b "b"})
2
time-align-mobile.subs> (count (:buckets app-db))
10
time-align-mobile.subs> (keys (:buckets app-db))
(#uuid "82f8a287-97ed-45b9-9fb9-38e6ab90332a" #uuid "f50dd2ec-ba83-433b-aa22-7cf4d7196493" #uuid "7d886694-fc39-4a16-975d-a22e16a2a854" #uuid "c8bbdf20-1399-4852-8123-28f391d5ea3d" #uuid "8d66134c-1162-4647-9e55-2b16ebf17da5" #uuid "54c6fe40-982c-48fa-bf7e-712f6c2bf832" #uuid "15b4326a-c90b-4fd1-94c1-285a7da9ee07" #uuid "7dbb8f37-f79d-4121-91d2-bb70fd8eaece" #uuid "46ea89b4-5dc6-46c6-b715-41513519299f" #uuid "a22654de-db53-4460-b4dc-0df1becd4061")
time-align-mobile.subs>        (->> 7
             range
             (take 7)
             (map #(helpers/back-n-days (js/Date.) %))
             (map (fn [date]
                    {date {:actual (->> periods
                                        (remove :planned)
                                        (map #(merge % {:time-on-date
                                                        (helpers/ms->h-float
                                                         (helpers/period-time-on-day % date))})))}})))
;; output cleared

time-align-mobile.subs>        (->> 7
             range
             (take 7)
             (map #(helpers/back-n-days (js/Date.) %))
             (map (fn [date]
                    {date {:actual (->> periods
                                        (remove :planned)
                                        (map #(merge {} {:time-on-date
                                                        (helpers/ms->h-float
                                                         (helpers/period-time-on-day % date))})))}})))
;; output cleared

time-align-mobile.subs>        (->> 7
             range
             (take 7)
             (map #(helpers/back-n-days (js/Date.) %))
             (map (fn [date]
                    {date {:actual (->> periods
                                        (remove :planned)
                                        (map #(helpers/ms->h-float
                                                         (helpers/period-time-on-day % date)))
                                        (reduce +))}})))
({#inst "2019-12-14T05:00:00.000-00:00" {:actual 0}} {#inst "2019-12-13T05:00:00.000-00:00" {:actual 0}} {#inst "2019-12-12T05:00:00.000-00:00" {:actual 0}} {#inst "2019-12-11T05:00:00.000-00:00" {:actual 0}} {#inst "2019-12-10T05:00:00.000-00:00" {:actual 8.56531}} {#inst "2019-12-09T05:00:00.000-00:00" {:actual 29.22641833333333}} {#inst "2019-12-08T05:00:00.000-00:00" {:actual 8.56531}})
time-align-mobile.subs> (.toFixed 1.34444444 2)
"1.34"
time-align-mobile.subs> (float (.toFixed 1.34444444 2))
"1.34"
time-align-mobile.subs> (parseFloat "12.32")
;; output cleared

time-align-mobile.subs> (js/parseFloat "12.2222")
12.2222
time-align-mobile.subs> (js/parseFloat (.toFixed 1.34444444 2))
1.34[:app] Compiling ...
[:app] Build completed. (216 files, 11 compiled, 0 warnings, 2.39s)

time-align-mobile.subs>        (->> 7
             range
             (take 7)
             (map #(helpers/back-n-days (js/Date.) %))
             (map (fn [date]
                    {date {:actual (->> periods
                                        (remove :planned)
                                        (map #(helpers/ms->h-float
                                                         (helpers/period-time-on-day % date)))
                                        (reduce +))}})))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :6:41
 Use of undeclared Var time-align-mobile.subs/periods
--------------------------------------------------------------------------------
({#inst "2019-12-14T05:00:00.000-00:00" {:actual 0}} {#inst "2019-12-13T05:00:00.000-00:00" {:actual 0}} {#inst "2019-12-12T05:00:00.000-00:00" {:actual 0}} {#inst "2019-12-11T05:00:00.000-00:00" {:actual 0}} {#inst "2019-12-10T05:00:00.000-00:00" {:actual 8.58}} {#inst "2019-12-09T05:00:00.000-00:00" {:actual 29.24}} {#inst "2019-12-08T05:00:00.000-00:00" {:actual 8.58}})
time-align-mobile.subs> (comment "updated ms->h-float to round")
nil
time-align-mobile.subs> (defn get-time-on-day-for-track [date planned] 
                          (->> periods
                               (filter #(= (:planned %) planned))
                               (map #(helpers/ms->h-float
                                      (helpers/period-time-on-day % date)))
                               (reduce +)))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: :2:32
 Use of undeclared Var time-align-mobile.subs/periods
--------------------------------------------------------------------------------
#'time-align-mobile.subs/get-time-on-day-for-track
time-align-mobile.subs>        (->> 7
             range
             (take 7)
             (map #(helpers/back-n-days (js/Date.) %))
             (map (fn [date]
                    {date {:actual (get-time-on-day-for-track date false)
                           :planned (get-time-on-day-for-track date true)}})))
({#inst "2019-12-14T05:00:00.000-00:00" {:actual 0, :planned 0}} {#inst "2019-12-13T05:00:00.000-00:00" {:actual 0, :planned 0}} {#inst "2019-12-12T05:00:00.000-00:00" {:actual 0, :planned 0}} {#inst "2019-12-11T05:00:00.000-00:00" {:actual 0, :planned 0}} {#inst "2019-12-10T05:00:00.000-00:00" {:actual 8.58, :planned 0}} {#inst "2019-12-09T05:00:00.000-00:00" {:actual 29.24, :planned 0}} {#inst "2019-12-08T05:00:00.000-00:00" {:actual 8.58, :planned 0}})
time-align-mobile.subs> 